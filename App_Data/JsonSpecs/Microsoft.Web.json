[
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "friendlyName": "(string)",
                "subjectName": "(string)",
                "hostNames": [
                    "(string)"
                ],
                "pfxBlob": "(string)",
                "siteName": "(string)",
                "selfLink": "(string)",
                "issuer": "(string)",
                "issueDate": "(string)",
                "expirationDate": "(string)",
                "password": "(string)",
                "thumbprint": "(string)",
                "valid": "(boolean)",
                "cerBlob": "(string)",
                "publicKeyHash": "(string)",
                "hostingEnvironment": "(string)"
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "friendlyName": "Friendly name of the certificate",
                "subjectName": "Subject name of the certificate",
                "hostNames": [
                    null
                ],
                "pfxBlob": "Pfx blob",
                "siteName": "App name",
                "selfLink": "Self link",
                "issuer": "Certificate issuer",
                "issueDate": "Certificate issue Date",
                "expirationDate": "Certificate expriration date",
                "password": "Certificate password",
                "thumbprint": "Certificate thumbprint",
                "valid": "Is the certificate valid?",
                "cerBlob": "Raw bytes of .cer file",
                "publicKeyHash": "Public key hash",
                "hostingEnvironment": "The hosting environment the certificate exists on"
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "friendlyName": "(string)",
                "subjectName": "(string)",
                "hostNames": [
                    "(string)"
                ],
                "pfxBlob": "(string)",
                "siteName": "(string)",
                "selfLink": "(string)",
                "issuer": "(string)",
                "issueDate": "(string)",
                "expirationDate": "(string)",
                "password": "(string)",
                "thumbprint": "(string)",
                "valid": "(boolean)",
                "cerBlob": "(string)",
                "publicKeyHash": "(string)",
                "hostingEnvironment": "(string)"
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "friendlyName": "Friendly name of the certificate",
                "subjectName": "Subject name of the certificate",
                "hostNames": [
                    null
                ],
                "pfxBlob": "Pfx blob",
                "siteName": "App name",
                "selfLink": "Self link",
                "issuer": "Certificate issuer",
                "issueDate": "Certificate issue Date",
                "expirationDate": "Certificate expriration date",
                "password": "Certificate password",
                "thumbprint": "Certificate thumbprint",
                "valid": "Is the certificate valid?",
                "cerBlob": "Raw bytes of .cer file",
                "publicKeyHash": "Public key hash",
                "hostingEnvironment": "The hosting environment the certificate exists on"
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/publishingUsers",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/geoRegions",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/serverfarms",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/sites",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/hostingEnvironments",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/moveResources",
        "RequestBody": {
            "targetResourceGroup": "(string)",
            "resources": [
                "(string)"
            ]
        },
        "RequestBodyDoc": {
            "resources": [
                null
            ]
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "name": "(string)",
                "location": "(string)",
                "status": "(string)",
                "vnetName": "(string)",
                "vnetResourceGroupName": "(string)",
                "vnetSubnetName": "(string)",
                "vnetResourceId": "(string)",
                "multiSize": "(string)",
                "multiRoleCount": "(integer)",
                "workerPools": [
                    {
                        "workerSizeId": "(integer)",
                        "computeMode": "(string)",
                        "workerSize": "(string)",
                        "workerCount": "(integer)",
                        "sku": {
                            "name": "(string)",
                            "tier": "(string)",
                            "capacity": "(integer)"
                        }
                    }
                ],
                "ipsslAddressCount": "(integer)",
                "databaseEdition": "(string)",
                "databaseServiceObjective": "(string)",
                "upgradeDomains": "(integer)",
                "subscriptionId": "(string)",
                "dnsSuffix": "(string)",
                "lastAction": "(string)",
                "lastActionResult": "(string)",
                "allowedMultiSizes": "(string)",
                "allowedWorkerSizes": "(string)",
                "maximumNumberOfMachines": "(integer)",
                "vipMappings": [
                    {
                        "virtualIP": "(string)",
                        "internalHttpPort": "(integer)",
                        "internalHttpsPort": "(integer)",
                        "inUse": "(boolean)"
                    }
                ],
                "environmentCapacities": [
                    {
                        "name": "(string)",
                        "availableCapacity": "(integer)",
                        "totalCapacity": "(integer)",
                        "unit": "(string)",
                        "computeMode": "(string)",
                        "workerSize": "(string)",
                        "workerSizeId": "(integer)",
                        "excludeFromCapacityAllocation": "(boolean)",
                        "isApplicableForAllComputeModes": "(boolean)",
                        "siteMode": "(string)"
                    }
                ],
                "networkAccessControlList": [
                    {
                        "action": "(string)",
                        "description": "(string)",
                        "order": "(integer)",
                        "remoteSubnet": "(string)"
                    }
                ],
                "environmentIsHealthy": "(boolean)",
                "environmentStatus": "(string)",
                "resourceGroup": "(string)"
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "name": "Name of the hostingEnvironment (App Service Environment)",
                "location": "Location of the hostingEnvironment (App Service Environment), e.g. \"West US\"",
                "status": "Current status of the hostingEnvironment (App Service Environment)",
                "vnetName": "Name of the hostingEnvironment's (App Service Environment) virtual network",
                "vnetResourceGroupName": "Resource group of the hostingEnvironment's (App Service Environment) virtual network",
                "vnetSubnetName": "Subnet of the hostingEnvironment's (App Service Environment) virtual network",
                "vnetResourceId": "Fully qualifed resource id of the hostingEnvironment's (App Service Environment) virtual network",
                "multiSize": "Front-end VM size, e.g. \"Medium\", \"Large\"",
                "multiRoleCount": "Number of front-end instances",
                "workerPools": [
                    {
                        "workerSizeId": "Worker size id for referencing this worker pool",
                        "computeMode": "Shared or dedicated web app hosting",
                        "workerSize": "VM size of the worker pool instances",
                        "workerCount": "Number of instances in the worker pool",
                        "sku": {
                            "name": "Name for the App Service Plan SKU",
                            "tier": "Service Tier for the App Service Plan",
                            "capacity": "Current number of workers assigned to the App Service Plan"
                        }
                    }
                ],
                "ipsslAddressCount": "Number of IP SSL addresses reserved for this hostingEnvironment (App Service Environment)",
                "databaseEdition": "Edition of the metadata database for the hostingEnvironment (App Service Environment) e.g. \"Standard\"",
                "databaseServiceObjective": "Service objective of the metadata database for the hostingEnvironment (App Service Environment) e.g. \"S0\"",
                "upgradeDomains": "Number of upgrade domains of this hostingEnvironment (App Service Environment)",
                "subscriptionId": "Subscription of the hostingEnvironment (App Service Environment)",
                "dnsSuffix": "DNS suffix of the hostingEnvironment (App Service Environment)",
                "lastAction": "Last deployment action on this hostingEnvironment (App Service Environment)",
                "lastActionResult": "Result of the last deployment action on this hostingEnvironment (App Service Environment)",
                "allowedMultiSizes": "List of comma separated strings describing which VM sizes are allowed for front-ends",
                "allowedWorkerSizes": "List of comma separated strings describing which VM sizes are allowed for workers",
                "maximumNumberOfMachines": "Maximum number of VMs in this hostingEnvironment (App Service Environment)",
                "vipMappings": [
                    {
                        "virtualIP": "Virtual IP address",
                        "internalHttpPort": "Internal HTTP port",
                        "internalHttpsPort": "Internal HTTPS port",
                        "inUse": "Is VIP mapping in use"
                    }
                ],
                "environmentCapacities": [
                    {
                        "name": "Name of the stamp",
                        "availableCapacity": "Available capacity (# of machines, bytes of storage etc...)",
                        "totalCapacity": "Total capacity (# of machines, bytes of storage etc...)",
                        "unit": "Name of the unit",
                        "computeMode": "Shared/Dedicated workers",
                        "workerSize": "Size of the machines",
                        "workerSizeId": "Size Id of machines: \r\n            0 - Small\r\n            1 - Medium\r\n            2 - Large",
                        "excludeFromCapacityAllocation": "If true it includes basic sites\r\n            Basic sites are not used for capacity allocation.",
                        "isApplicableForAllComputeModes": "Is capacity applicable for all sites?",
                        "siteMode": "Shared or Dedicated"
                    }
                ],
                "networkAccessControlList": [
                    {}
                ],
                "environmentIsHealthy": "True/false indicating whether the hostingEnvironment (App Service Environment) is healthy",
                "environmentStatus": "Detailed message about with results of the last check of the hostingEnvironment (App Service Environment)",
                "resourceGroup": "Resource group of the hostingEnvironment (App Service Environment)"
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "name": "(string)",
                "location": "(string)",
                "status": "(string)",
                "vnetName": "(string)",
                "vnetResourceGroupName": "(string)",
                "vnetSubnetName": "(string)",
                "vnetResourceId": "(string)",
                "multiSize": "(string)",
                "multiRoleCount": "(integer)",
                "workerPools": [
                    {
                        "workerSizeId": "(integer)",
                        "computeMode": "(string)",
                        "workerSize": "(string)",
                        "workerCount": "(integer)",
                        "sku": {
                            "name": "(string)",
                            "tier": "(string)",
                            "capacity": "(integer)"
                        }
                    }
                ],
                "ipsslAddressCount": "(integer)",
                "databaseEdition": "(string)",
                "databaseServiceObjective": "(string)",
                "upgradeDomains": "(integer)",
                "subscriptionId": "(string)",
                "dnsSuffix": "(string)",
                "lastAction": "(string)",
                "lastActionResult": "(string)",
                "allowedMultiSizes": "(string)",
                "allowedWorkerSizes": "(string)",
                "maximumNumberOfMachines": "(integer)",
                "vipMappings": [
                    {
                        "virtualIP": "(string)",
                        "internalHttpPort": "(integer)",
                        "internalHttpsPort": "(integer)",
                        "inUse": "(boolean)"
                    }
                ],
                "environmentCapacities": [
                    {
                        "name": "(string)",
                        "availableCapacity": "(integer)",
                        "totalCapacity": "(integer)",
                        "unit": "(string)",
                        "computeMode": "(string)",
                        "workerSize": "(string)",
                        "workerSizeId": "(integer)",
                        "excludeFromCapacityAllocation": "(boolean)",
                        "isApplicableForAllComputeModes": "(boolean)",
                        "siteMode": "(string)"
                    }
                ],
                "networkAccessControlList": [
                    {
                        "action": "(string)",
                        "description": "(string)",
                        "order": "(integer)",
                        "remoteSubnet": "(string)"
                    }
                ],
                "environmentIsHealthy": "(boolean)",
                "environmentStatus": "(string)",
                "resourceGroup": "(string)"
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "name": "Name of the hostingEnvironment (App Service Environment)",
                "location": "Location of the hostingEnvironment (App Service Environment), e.g. \"West US\"",
                "status": "Current status of the hostingEnvironment (App Service Environment)",
                "vnetName": "Name of the hostingEnvironment's (App Service Environment) virtual network",
                "vnetResourceGroupName": "Resource group of the hostingEnvironment's (App Service Environment) virtual network",
                "vnetSubnetName": "Subnet of the hostingEnvironment's (App Service Environment) virtual network",
                "vnetResourceId": "Fully qualifed resource id of the hostingEnvironment's (App Service Environment) virtual network",
                "multiSize": "Front-end VM size, e.g. \"Medium\", \"Large\"",
                "multiRoleCount": "Number of front-end instances",
                "workerPools": [
                    {
                        "workerSizeId": "Worker size id for referencing this worker pool",
                        "computeMode": "Shared or dedicated web app hosting",
                        "workerSize": "VM size of the worker pool instances",
                        "workerCount": "Number of instances in the worker pool",
                        "sku": {
                            "name": "Name for the App Service Plan SKU",
                            "tier": "Service Tier for the App Service Plan",
                            "capacity": "Current number of workers assigned to the App Service Plan"
                        }
                    }
                ],
                "ipsslAddressCount": "Number of IP SSL addresses reserved for this hostingEnvironment (App Service Environment)",
                "databaseEdition": "Edition of the metadata database for the hostingEnvironment (App Service Environment) e.g. \"Standard\"",
                "databaseServiceObjective": "Service objective of the metadata database for the hostingEnvironment (App Service Environment) e.g. \"S0\"",
                "upgradeDomains": "Number of upgrade domains of this hostingEnvironment (App Service Environment)",
                "subscriptionId": "Subscription of the hostingEnvironment (App Service Environment)",
                "dnsSuffix": "DNS suffix of the hostingEnvironment (App Service Environment)",
                "lastAction": "Last deployment action on this hostingEnvironment (App Service Environment)",
                "lastActionResult": "Result of the last deployment action on this hostingEnvironment (App Service Environment)",
                "allowedMultiSizes": "List of comma separated strings describing which VM sizes are allowed for front-ends",
                "allowedWorkerSizes": "List of comma separated strings describing which VM sizes are allowed for workers",
                "maximumNumberOfMachines": "Maximum number of VMs in this hostingEnvironment (App Service Environment)",
                "vipMappings": [
                    {
                        "virtualIP": "Virtual IP address",
                        "internalHttpPort": "Internal HTTP port",
                        "internalHttpsPort": "Internal HTTPS port",
                        "inUse": "Is VIP mapping in use"
                    }
                ],
                "environmentCapacities": [
                    {
                        "name": "Name of the stamp",
                        "availableCapacity": "Available capacity (# of machines, bytes of storage etc...)",
                        "totalCapacity": "Total capacity (# of machines, bytes of storage etc...)",
                        "unit": "Name of the unit",
                        "computeMode": "Shared/Dedicated workers",
                        "workerSize": "Size of the machines",
                        "workerSizeId": "Size Id of machines: \r\n            0 - Small\r\n            1 - Medium\r\n            2 - Large",
                        "excludeFromCapacityAllocation": "If true it includes basic sites\r\n            Basic sites are not used for capacity allocation.",
                        "isApplicableForAllComputeModes": "Is capacity applicable for all sites?",
                        "siteMode": "Shared or Dedicated"
                    }
                ],
                "networkAccessControlList": [
                    {}
                ],
                "environmentIsHealthy": "True/false indicating whether the hostingEnvironment (App Service Environment) is healthy",
                "environmentStatus": "Detailed message about with results of the last check of the hostingEnvironment (App Service Environment)",
                "resourceGroup": "Resource group of the hostingEnvironment (App Service Environment)"
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/capacities/compute",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/capacities/virtualip",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/metricdefinitions",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/metricdefinitions",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerSizeId}/metricdefinitions",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/sites",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/serverfarms",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "workerSizeId": "(integer)",
                "computeMode": "(string)",
                "workerSize": "(string)",
                "workerCount": "(integer)",
                "sku": {
                    "name": "(string)",
                    "tier": "(string)",
                    "capacity": "(integer)"
                }
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "workerSizeId": "Worker size id for referencing this worker pool",
                "computeMode": "Shared or dedicated web app hosting",
                "workerSize": "VM size of the worker pool instances",
                "workerCount": "Number of instances in the worker pool",
                "sku": {
                    "name": "Name for the App Service Plan SKU",
                    "tier": "Service Tier for the App Service Plan",
                    "capacity": "Current number of workers assigned to the App Service Plan"
                }
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "workerSizeId": "(integer)",
                "computeMode": "(string)",
                "workerSize": "(string)",
                "workerCount": "(integer)",
                "sku": {
                    "name": "(string)",
                    "tier": "(string)",
                    "capacity": "(integer)"
                }
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "workerSizeId": "Worker size id for referencing this worker pool",
                "computeMode": "Shared or dedicated web app hosting",
                "workerSize": "VM size of the worker pool instances",
                "workerCount": "Number of instances in the worker pool",
                "sku": {
                    "name": "Name for the App Service Plan SKU",
                    "tier": "Service Tier for the App Service Plan",
                    "capacity": "Current number of workers assigned to the App Service Plan"
                }
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/skus",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerSizeId}",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerSizeId}",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "workerSizeId": "(integer)",
                "computeMode": "(string)",
                "workerSize": "(string)",
                "workerCount": "(integer)",
                "sku": {
                    "name": "(string)",
                    "tier": "(string)",
                    "capacity": "(integer)"
                }
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "workerSizeId": "Worker size id for referencing this worker pool",
                "computeMode": "Shared or dedicated web app hosting",
                "workerSize": "VM size of the worker pool instances",
                "workerCount": "Number of instances in the worker pool",
                "sku": {
                    "name": "Name for the App Service Plan SKU",
                    "tier": "Service Tier for the App Service Plan",
                    "capacity": "Current number of workers assigned to the App Service Plan"
                }
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerSizeId}",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "workerSizeId": "(integer)",
                "computeMode": "(string)",
                "workerSize": "(string)",
                "workerCount": "(integer)",
                "sku": {
                    "name": "(string)",
                    "tier": "(string)",
                    "capacity": "(integer)"
                }
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "workerSizeId": "Worker size id for referencing this worker pool",
                "computeMode": "Shared or dedicated web app hosting",
                "workerSize": "VM size of the worker pool instances",
                "workerCount": "Number of instances in the worker pool",
                "sku": {
                    "name": "Name for the App Service Plan SKU",
                    "tier": "Service Tier for the App Service Plan",
                    "capacity": "Current number of workers assigned to the App Service Plan"
                }
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerSizeId}/skus",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/providers/Microsoft.Web/sourcecontrols",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/providers/Microsoft.Web/sourcecontrols/{sourceControlType}",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/providers/Microsoft.Web/sourcecontrols/{sourceControlType}",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "name": "(string)",
                "token": "(string)",
                "tokenSecret": "(string)",
                "refreshToken": "(string)",
                "expirationTime": "(string)"
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "name": "Name or Source Control Type",
                "token": "OAuth Access Token",
                "tokenSecret": "OAuth Access Token Secret",
                "refreshToken": "OAuth Refresh Token",
                "expirationTime": "OAuth Token Expiration"
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {}
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {}
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {}
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {}
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/metricdefinitions",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}",
        "ResponseBody": {
            "id": "(string)",
            "name": "(string)",
            "type": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "vnetResourceId": "(string)",
                "certThumbprint": "(string)",
                "certBlob": "(string)"
            }
        },
        "ResponseBodyDoc": {
            "id": "Resource Id. Typically id is populated only for responses to GET requests. Caller is responsible for passing in this\r\n            value for GET requests only.\r\n            For example: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupId}/providers/Microsoft.Web/sites/{sitename}",
            "name": "Name of resource",
            "type": "Type of resource e.g Microsoft.Web/sites",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "vnetResourceId": "The vnet resource id",
                "certThumbprint": "The client certificate thumbprint",
                "certBlob": "A certificate file (.cer) blob containing the public key of the private key used to authenticate a \r\n            Point-To-Site VPN connection."
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes",
        "ResponseBody": [
            {
                "id": "(string)",
                "name": "(string)",
                "type": "(string)",
                "kind": "(string)",
                "location": "(string)",
                "tags": {},
                "plan": {
                    "name": "(string)",
                    "publisher": "(string)",
                    "product": "(string)",
                    "promotionCode": "(string)"
                },
                "properties": {
                    "name": "(string)",
                    "startAddress": "(string)",
                    "endAddress": "(string)",
                    "routeType": "(string)"
                }
            }
        ],
        "ResponseBodyDoc": [
            {
                "id": "Resource Id. Typically id is populated only for responses to GET requests. Caller is responsible for passing in this\r\n            value for GET requests only.\r\n            For example: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupId}/providers/Microsoft.Web/sites/{sitename}",
                "name": "Name of resource",
                "type": "Type of resource e.g Microsoft.Web/sites",
                "kind": "Kind of app e.g web app, api app, mobile app",
                "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
                "tags": {},
                "plan": {
                    "name": "The name",
                    "publisher": "The publisher",
                    "product": "The product",
                    "promotionCode": "The promotion code"
                },
                "properties": {
                    "name": "The name of this route. This is only returned by the server and does not need to be set by the client.",
                    "startAddress": "The starting address for this route. This may also include a CIDR notation, in which case the end address must not be specified.",
                    "endAddress": "The ending address for this route. If the start address is specified in CIDR notation, this must be omitted.",
                    "routeType": "The type of route this is:\r\n            DEFAULT - By default, every web app has routes to the local address ranges specified by RFC1918\r\n            INHERITED - Routes inherited from the real Virtual Network routes\r\n            STATIC - Static route set on the web app only\r\n            \r\n            These values will be used for syncing a Web App's routes with those from a Virtual Network. This operation will clear all DEFAULT and INHERITED routes and replace them\r\n            with new INHERITED routes."
                }
            }
        ],
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
        "ResponseBody": [
            {
                "id": "(string)",
                "name": "(string)",
                "type": "(string)",
                "kind": "(string)",
                "location": "(string)",
                "tags": {},
                "plan": {
                    "name": "(string)",
                    "publisher": "(string)",
                    "product": "(string)",
                    "promotionCode": "(string)"
                },
                "properties": {
                    "name": "(string)",
                    "startAddress": "(string)",
                    "endAddress": "(string)",
                    "routeType": "(string)"
                }
            }
        ],
        "ResponseBodyDoc": [
            {
                "id": "Resource Id. Typically id is populated only for responses to GET requests. Caller is responsible for passing in this\r\n            value for GET requests only.\r\n            For example: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupId}/providers/Microsoft.Web/sites/{sitename}",
                "name": "Name of resource",
                "type": "Type of resource e.g Microsoft.Web/sites",
                "kind": "Kind of app e.g web app, api app, mobile app",
                "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
                "tags": {},
                "plan": {
                    "name": "The name",
                    "publisher": "The publisher",
                    "product": "The product",
                    "promotionCode": "The promotion code"
                },
                "properties": {
                    "name": "The name of this route. This is only returned by the server and does not need to be set by the client.",
                    "startAddress": "The starting address for this route. This may also include a CIDR notation, in which case the end address must not be specified.",
                    "endAddress": "The ending address for this route. If the start address is specified in CIDR notation, this must be omitted.",
                    "routeType": "The type of route this is:\r\n            DEFAULT - By default, every web app has routes to the local address ranges specified by RFC1918\r\n            INHERITED - Routes inherited from the real Virtual Network routes\r\n            STATIC - Static route set on the web app only\r\n            \r\n            These values will be used for syncing a Web App's routes with those from a Virtual Network. This operation will clear all DEFAULT and INHERITED routes and replace them\r\n            with new INHERITED routes."
                }
            }
        ],
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
        "ResponseBody": [
            {
                "id": "(string)",
                "name": "(string)",
                "type": "(string)",
                "kind": "(string)",
                "location": "(string)",
                "tags": {},
                "plan": {
                    "name": "(string)",
                    "publisher": "(string)",
                    "product": "(string)",
                    "promotionCode": "(string)"
                },
                "properties": {
                    "name": "(string)",
                    "startAddress": "(string)",
                    "endAddress": "(string)",
                    "routeType": "(string)"
                }
            }
        ],
        "ResponseBodyDoc": [
            {
                "id": "Resource Id. Typically id is populated only for responses to GET requests. Caller is responsible for passing in this\r\n            value for GET requests only.\r\n            For example: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupId}/providers/Microsoft.Web/sites/{sitename}",
                "name": "Name of resource",
                "type": "Type of resource e.g Microsoft.Web/sites",
                "kind": "Kind of app e.g web app, api app, mobile app",
                "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
                "tags": {},
                "plan": {
                    "name": "The name",
                    "publisher": "The publisher",
                    "product": "The product",
                    "promotionCode": "The promotion code"
                },
                "properties": {
                    "name": "The name of this route. This is only returned by the server and does not need to be set by the client.",
                    "startAddress": "The starting address for this route. This may also include a CIDR notation, in which case the end address must not be specified.",
                    "endAddress": "The ending address for this route. If the start address is specified in CIDR notation, this must be omitted.",
                    "routeType": "The type of route this is:\r\n            DEFAULT - By default, every web app has routes to the local address ranges specified by RFC1918\r\n            INHERITED - Routes inherited from the real Virtual Network routes\r\n            STATIC - Static route set on the web app only\r\n            \r\n            These values will be used for syncing a Web App's routes with those from a Virtual Network. This operation will clear all DEFAULT and INHERITED routes and replace them\r\n            with new INHERITED routes."
                }
            }
        ],
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "name": "(string)",
                "startAddress": "(string)",
                "endAddress": "(string)",
                "routeType": "(string)"
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "name": "The name of this route. This is only returned by the server and does not need to be set by the client.",
                "startAddress": "The starting address for this route. This may also include a CIDR notation, in which case the end address must not be specified.",
                "endAddress": "The ending address for this route. If the start address is specified in CIDR notation, this must be omitted.",
                "routeType": "The type of route this is:\r\n            DEFAULT - By default, every web app has routes to the local address ranges specified by RFC1918\r\n            INHERITED - Routes inherited from the real Virtual Network routes\r\n            STATIC - Static route set on the web app only\r\n            \r\n            These values will be used for syncing a Web App's routes with those from a Virtual Network. This operation will clear all DEFAULT and INHERITED routes and replace them\r\n            with new INHERITED routes."
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
        "ResponseBody": {},
        "ResponseBodyDoc": {},
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
        "ResponseBody": [
            {
                "id": "(string)",
                "name": "(string)",
                "type": "(string)",
                "kind": "(string)",
                "location": "(string)",
                "tags": {},
                "plan": {
                    "name": "(string)",
                    "publisher": "(string)",
                    "product": "(string)",
                    "promotionCode": "(string)"
                },
                "properties": {
                    "name": "(string)",
                    "startAddress": "(string)",
                    "endAddress": "(string)",
                    "routeType": "(string)"
                }
            }
        ],
        "ResponseBodyDoc": [
            {
                "id": "Resource Id. Typically id is populated only for responses to GET requests. Caller is responsible for passing in this\r\n            value for GET requests only.\r\n            For example: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupId}/providers/Microsoft.Web/sites/{sitename}",
                "name": "Name of resource",
                "type": "Type of resource e.g Microsoft.Web/sites",
                "kind": "Kind of app e.g web app, api app, mobile app",
                "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
                "tags": {},
                "plan": {
                    "name": "The name",
                    "publisher": "The publisher",
                    "product": "The product",
                    "promotionCode": "The promotion code"
                },
                "properties": {
                    "name": "The name of this route. This is only returned by the server and does not need to be set by the client.",
                    "startAddress": "The starting address for this route. This may also include a CIDR notation, in which case the end address must not be specified.",
                    "endAddress": "The ending address for this route. If the start address is specified in CIDR notation, this must be omitted.",
                    "routeType": "The type of route this is:\r\n            DEFAULT - By default, every web app has routes to the local address ranges specified by RFC1918\r\n            INHERITED - Routes inherited from the real Virtual Network routes\r\n            STATIC - Static route set on the web app only\r\n            \r\n            These values will be used for syncing a Web App's routes with those from a Virtual Network. This operation will clear all DEFAULT and INHERITED routes and replace them\r\n            with new INHERITED routes."
                }
            }
        ],
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "name": "(string)",
                "startAddress": "(string)",
                "endAddress": "(string)",
                "routeType": "(string)"
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "name": "The name of this route. This is only returned by the server and does not need to be set by the client.",
                "startAddress": "The starting address for this route. This may also include a CIDR notation, in which case the end address must not be specified.",
                "endAddress": "The ending address for this route. If the start address is specified in CIDR notation, this must be omitted.",
                "routeType": "The type of route this is:\r\n            DEFAULT - By default, every web app has routes to the local address ranges specified by RFC1918\r\n            INHERITED - Routes inherited from the real Virtual Network routes\r\n            STATIC - Static route set on the web app only\r\n            \r\n            These values will be used for syncing a Web App's routes with those from a Virtual Network. This operation will clear all DEFAULT and INHERITED routes and replace them\r\n            with new INHERITED routes."
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/sites",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/restartSites",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "name": "(string)",
                "state": "(string)",
                "hostNames": [
                    "(string)"
                ],
                "repositorySiteName": "(string)",
                "usageState": "(string)",
                "enabled": "(boolean)",
                "enabledHostNames": [
                    "(string)"
                ],
                "availabilityState": "(string)",
                "hostNameSslStates": [
                    {
                        "name": "(string)",
                        "sslState": "(string)",
                        "virtualIP": "(string)",
                        "thumbprint": "(string)",
                        "toUpdate": "(boolean)",
                        "toUpdateIpBasedSsl": "(boolean)"
                    }
                ],
                "serverFarm": "(string)",
                "serverFarmId": "(string)",
                "lastModifiedTimeUtc": "(string)",
                "siteConfig": {
                    "numberOfWorkers": "(integer)",
                    "defaultDocuments": [
                        "(string)"
                    ],
                    "netFrameworkVersion": "(string)",
                    "phpVersion": "(string)",
                    "pythonVersion": "(string)",
                    "requestTracingEnabled": "(boolean)",
                    "requestTracingExpirationTime": "(string)",
                    "remoteDebuggingEnabled": "(boolean)",
                    "remoteDebuggingVersion": "(string)",
                    "httpLoggingEnabled": "(boolean)",
                    "logsDirectorySizeLimit": "(integer)",
                    "detailedErrorLoggingEnabled": "(boolean)",
                    "publishingUsername": "(string)",
                    "publishingPassword": "(string)",
                    "appSettings": [
                        {
                            "name": "(string)",
                            "value": "(string)"
                        }
                    ],
                    "metadata": [
                        {
                            "name": "(string)",
                            "value": "(string)"
                        }
                    ],
                    "connectionStrings": [
                        {
                            "name": "(string)",
                            "connectionString": "(string)",
                            "type": "(string)"
                        }
                    ],
                    "handlerMappings": [
                        {
                            "extension": "(string)",
                            "scriptProcessor": "(string)",
                            "arguments": "(string)"
                        }
                    ],
                    "documentRoot": "(string)",
                    "scmType": "(string)",
                    "use32BitWorkerProcess": "(boolean)",
                    "webSocketsEnabled": "(boolean)",
                    "alwaysOn": "(boolean)",
                    "javaVersion": "(string)",
                    "javaContainer": "(string)",
                    "javaContainerVersion": "(string)",
                    "managedPipelineMode": "(string)",
                    "virtualApplications": [
                        {
                            "virtualPath": "(string)",
                            "physicalPath": "(string)",
                            "preloadEnabled": "(boolean)",
                            "virtualDirectories": [
                                {
                                    "virtualPath": "(string)",
                                    "physicalPath": "(string)"
                                }
                            ]
                        }
                    ],
                    "loadBalancing": "(string)",
                    "experiments": {
                        "rampUpRules": [
                            {
                                "actionHostName": "(string)",
                                "reroutePercentage": "(number)",
                                "changeStep": "(number)",
                                "changeIntervalInMinutes": "(integer)",
                                "minReroutePercentage": "(number)",
                                "maxReroutePercentage": "(number)",
                                "changeDecisionCallbackUrl": "(string)",
                                "name": "(string)"
                            }
                        ]
                    },
                    "limits": {
                        "maxPercentageCpu": "(number)",
                        "maxMemoryInMb": "(integer)",
                        "maxDiskSizeInMb": "(integer)"
                    },
                    "autoHealEnabled": "(boolean)",
                    "autoHealRules": {
                        "triggers": {
                            "requests": {
                                "count": "(integer)",
                                "timeInterval": "(string)"
                            },
                            "privateBytesInKB": "(integer)",
                            "statusCodes": [
                                {
                                    "status": "(integer)",
                                    "subStatus": "(integer)",
                                    "win32Status": "(integer)",
                                    "count": "(integer)",
                                    "timeInterval": "(string)"
                                }
                            ],
                            "slowRequests": {
                                "timeTaken": "(string)",
                                "count": "(integer)",
                                "timeInterval": "(string)"
                            }
                        },
                        "actions": {
                            "actionType": "(string)",
                            "customAction": {
                                "exe": "(string)",
                                "parameters": "(string)"
                            }
                        }
                    },
                    "tracingOptions": "(string)",
                    "vnetName": "(string)",
                    "siteAuthEnabled": "(boolean)",
                    "siteAuthSettings": {
                        "clientId": "(string)",
                        "issuer": "(string)",
                        "aadClientId": "(string)",
                        "openIdIssuer": "(string)"
                    },
                    "autoSwapSlotName": "(string)"
                },
                "trafficManagerHostNames": [
                    "(string)"
                ],
                "sku": "(string)",
                "premiumAppDeployed": "(boolean)",
                "scmSiteAlsoStopped": "(boolean)",
                "targetSwapSlot": "(string)",
                "hostingEnvironment": "(string)",
                "microService": "(string)",
                "gatewaySiteName": "(string)",
                "clientAffinityEnabled": "(boolean)",
                "clientCertEnabled": "(boolean)",
                "kind": "(string)",
                "outboundIpAddresses": "(string)",
                "cloningInfo": {
                    "correlationId": "(string)",
                    "overwrite": "(boolean)",
                    "cloneCustomHostNames": "(boolean)",
                    "source": {
                        "name": "(string)",
                        "location": "(string)",
                        "resourceGroupName": "(string)",
                        "subscriptionId": "(string)",
                        "slot": "(string)"
                    },
                    "hostingEnvironment": "(string)"
                }
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "name": "Name of web app",
                "state": "State of the web app",
                "hostNames": [
                    null
                ],
                "repositorySiteName": "Name of repository site",
                "usageState": "State indicating whether web app has exceeded its quota usage",
                "enabled": "True if the site is enabled; otherwise, false. Setting this  value to false disables the site (takes the site off line).",
                "enabledHostNames": [
                    null
                ],
                "availabilityState": "Management information availability state for the web app. Possible values are Normal or Limited. \r\n            Normal means that the site is running correctly and that management information for the site is available. \r\n            Limited means that only partial management information for the site is available and that detailed site information is unavailable.",
                "hostNameSslStates": [
                    {
                        "name": "Host name",
                        "sslState": "SSL type",
                        "virtualIP": "Virtual IP address assigned to the host name if IP based SSL is enabled",
                        "thumbprint": "SSL cert thumbprint",
                        "toUpdate": "Set this flag to update existing host name",
                        "toUpdateIpBasedSsl": "Set this flag to update existing host name"
                    }
                ],
                "serverFarm": "App service plan web app is assoicated with",
                "lastModifiedTimeUtc": "Last time web app was modified in UTC",
                "siteConfig": {
                    "numberOfWorkers": "Number of workers",
                    "defaultDocuments": [
                        null
                    ],
                    "netFrameworkVersion": "Net Framework Version",
                    "phpVersion": "Version of PHP",
                    "pythonVersion": "Version of Python",
                    "requestTracingEnabled": "Enable request tracing",
                    "requestTracingExpirationTime": "Request tracing expiration time",
                    "remoteDebuggingEnabled": "Remote Debugging Enabled",
                    "remoteDebuggingVersion": "Remote Debugging Version",
                    "httpLoggingEnabled": "HTTP logging Enabled",
                    "logsDirectorySizeLimit": "HTTP Logs Directory size limit",
                    "detailedErrorLoggingEnabled": "Detailed error logging enabled",
                    "publishingUsername": "Publishing user name",
                    "publishingPassword": "Publishing password",
                    "appSettings": [
                        {
                            "name": "Pair name",
                            "value": "Pair value"
                        }
                    ],
                    "metadata": [
                        {
                            "name": "Pair name",
                            "value": "Pair value"
                        }
                    ],
                    "connectionStrings": [
                        {
                            "name": "Name of connection string",
                            "connectionString": "Connection string value",
                            "type": "Type of database"
                        }
                    ],
                    "handlerMappings": [
                        {
                            "extension": "Requests with this extension will be handled using the specified FastCGI application.",
                            "scriptProcessor": "The absolute path to the FastCGI application.",
                            "arguments": "Command-line arguments to be passed to the script processor."
                        }
                    ],
                    "documentRoot": "Document root",
                    "scmType": "SCM type",
                    "use32BitWorkerProcess": "Use 32 bit worker process",
                    "webSocketsEnabled": "Web socket enabled.",
                    "alwaysOn": "Always On",
                    "javaVersion": "Java version",
                    "javaContainer": "Java container",
                    "javaContainerVersion": "Java container version",
                    "managedPipelineMode": "Managed pipeline mode",
                    "virtualApplications": [
                        {
                            "virtualDirectories": [
                                {}
                            ]
                        }
                    ],
                    "loadBalancing": "Site load balancing",
                    "experiments": {
                        "rampUpRules": [
                            {
                                "actionHostName": "Hostname of a slot to which the traffic will be redirected if decided to. E.g. mysite-stage.azurewebsites.net",
                                "reroutePercentage": "Percentage of the traffic which will be redirected to {Microsoft.Web.Hosting.Administration.RampUpRule.ActionHostName}",
                                "changeStep": "[Optional] In auto ramp up scenario this is the step to to add/remove from {Microsoft.Web.Hosting.Administration.RampUpRule.ReroutePercentage} until it reaches \r\n            {Microsoft.Web.Hosting.Administration.RampUpRule.MinReroutePercentage} or {Microsoft.Web.Hosting.Administration.RampUpRule.MaxReroutePercentage}. Site metrics are checked every N minutes specificed in {Microsoft.Web.Hosting.Administration.RampUpRule.ChangeIntervalInMinutes}.\r\n            Custom decision algorithm can be provided in TiPCallback site extension which Url can be specified in {Microsoft.Web.Hosting.Administration.RampUpRule.ChangeDecisionCallbackUrl}",
                                "changeIntervalInMinutes": "[Optional] Specifies interval in mimuntes to reevaluate ReroutePercentage",
                                "minReroutePercentage": "[Optional] Specifies lower boundary above which ReroutePercentage will stay.",
                                "maxReroutePercentage": "[Optional] Specifies upper boundary below which ReroutePercentage will stay.",
                                "changeDecisionCallbackUrl": "Custom decision algorithm can be provided in TiPCallback site extension which Url can be specified. See TiPCallback site extension for the scaffold and contracts.\r\n            https://www.siteextensions.net/packages/TiPCallback/",
                                "name": "Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment."
                            }
                        ]
                    },
                    "limits": {
                        "maxPercentageCpu": "Maximum allowed CPU usage percentage",
                        "maxMemoryInMb": "Maximum allowed memory usage in MB",
                        "maxDiskSizeInMb": "Maximum allowed disk size usage in MB"
                    },
                    "autoHealEnabled": "Auto heal enabled",
                    "autoHealRules": {
                        "triggers": {
                            "requests": {
                                "count": "Count",
                                "timeInterval": "TimeInterval"
                            },
                            "privateBytesInKB": "PrivateBytesInKB - Defines a rule based on private bytes",
                            "statusCodes": [
                                {
                                    "status": "HTTP status code",
                                    "subStatus": "SubStatus",
                                    "win32Status": "Win32 error code",
                                    "count": "Count",
                                    "timeInterval": "TimeInterval"
                                }
                            ],
                            "slowRequests": {
                                "timeTaken": "TimeTaken",
                                "count": "Count",
                                "timeInterval": "TimeInterval"
                            }
                        },
                        "actions": {
                            "actionType": "ActionType - predefined action to be taken",
                            "customAction": {
                                "exe": "Executable to be run",
                                "parameters": "Parameters for the executable"
                            }
                        }
                    },
                    "tracingOptions": "Tracing options",
                    "vnetName": "Vnet name",
                    "siteAuthEnabled": "App Service Authentication / Authorization enabled",
                    "siteAuthSettings": {
                        "clientId": "Gets or sets the unique ID of this relying party application, known as the client_id.",
                        "issuer": "Gets or sets the OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.\r\n            When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://sts.windows.net/{tenant-guid}/.\r\n            This URI is a case-sensitive identifier for the token issuer."
                    },
                    "autoSwapSlotName": "Auto swap slot name"
                },
                "trafficManagerHostNames": [
                    null
                ],
                "sku": "A pricing plan (SKU) of the server farm (App Service plan) that this web app belongs to.",
                "premiumAppDeployed": "If set indicates whether web app is deployed as a premium app",
                "scmSiteAlsoStopped": "If set indicates whether to stop SCM (KUDU) site when the web app is stopped. Default is false.",
                "targetSwapSlot": "Read-only property that specifies which slot this app will swap into",
                "hostingEnvironment": "Name of hosting environment web app belongs to",
                "microService": "",
                "gatewaySiteName": "Name of gateway app associated with web app",
                "clientAffinityEnabled": "Specifies if the client affinity is enabled when load balancing http request for multiple instances of the web app",
                "clientCertEnabled": "Specifies if the client certificate is enabled for the web app",
                "kind": "Kind of resource",
                "outboundIpAddresses": "List of comma separated IP addresses that this web app uses for outbound connections. Those can be used when configuring firewall rules for databases accessed by this web app.",
                "cloningInfo": {
                    "correlationId": "Correlation Id of cloning operation. This id ties multiple cloning operations\r\n            together to use the same snapshot",
                    "overwrite": "Overwrite destination web app",
                    "cloneCustomHostNames": "If true, clone custom hostnames from source web app",
                    "source": {
                        "name": "Name of source web app",
                        "location": "Location of web app",
                        "resourceGroupName": "Resource group of web app",
                        "subscriptionId": "Azure subscription of web app",
                        "slot": "Name of web app slot"
                    },
                    "hostingEnvironment": "Hosting environment"
                }
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "name": "(string)",
                "state": "(string)",
                "hostNames": [
                    "(string)"
                ],
                "repositorySiteName": "(string)",
                "usageState": "(string)",
                "enabled": "(boolean)",
                "enabledHostNames": [
                    "(string)"
                ],
                "availabilityState": "(string)",
                "hostNameSslStates": [
                    {
                        "name": "(string)",
                        "sslState": "(string)",
                        "virtualIP": "(string)",
                        "thumbprint": "(string)",
                        "toUpdate": "(boolean)",
                        "toUpdateIpBasedSsl": "(boolean)"
                    }
                ],
                "serverFarm": "(string)",
                "serverFarmId": "(string)",
                "lastModifiedTimeUtc": "(string)",
                "siteConfig": {
                    "numberOfWorkers": "(integer)",
                    "defaultDocuments": [
                        "(string)"
                    ],
                    "netFrameworkVersion": "(string)",
                    "phpVersion": "(string)",
                    "pythonVersion": "(string)",
                    "requestTracingEnabled": "(boolean)",
                    "requestTracingExpirationTime": "(string)",
                    "remoteDebuggingEnabled": "(boolean)",
                    "remoteDebuggingVersion": "(string)",
                    "httpLoggingEnabled": "(boolean)",
                    "logsDirectorySizeLimit": "(integer)",
                    "detailedErrorLoggingEnabled": "(boolean)",
                    "publishingUsername": "(string)",
                    "publishingPassword": "(string)",
                    "appSettings": [
                        {
                            "name": "(string)",
                            "value": "(string)"
                        }
                    ],
                    "metadata": [
                        {
                            "name": "(string)",
                            "value": "(string)"
                        }
                    ],
                    "connectionStrings": [
                        {
                            "name": "(string)",
                            "connectionString": "(string)",
                            "type": "(string)"
                        }
                    ],
                    "handlerMappings": [
                        {
                            "extension": "(string)",
                            "scriptProcessor": "(string)",
                            "arguments": "(string)"
                        }
                    ],
                    "documentRoot": "(string)",
                    "scmType": "(string)",
                    "use32BitWorkerProcess": "(boolean)",
                    "webSocketsEnabled": "(boolean)",
                    "alwaysOn": "(boolean)",
                    "javaVersion": "(string)",
                    "javaContainer": "(string)",
                    "javaContainerVersion": "(string)",
                    "managedPipelineMode": "(string)",
                    "virtualApplications": [
                        {
                            "virtualPath": "(string)",
                            "physicalPath": "(string)",
                            "preloadEnabled": "(boolean)",
                            "virtualDirectories": [
                                {
                                    "virtualPath": "(string)",
                                    "physicalPath": "(string)"
                                }
                            ]
                        }
                    ],
                    "loadBalancing": "(string)",
                    "experiments": {
                        "rampUpRules": [
                            {
                                "actionHostName": "(string)",
                                "reroutePercentage": "(number)",
                                "changeStep": "(number)",
                                "changeIntervalInMinutes": "(integer)",
                                "minReroutePercentage": "(number)",
                                "maxReroutePercentage": "(number)",
                                "changeDecisionCallbackUrl": "(string)",
                                "name": "(string)"
                            }
                        ]
                    },
                    "limits": {
                        "maxPercentageCpu": "(number)",
                        "maxMemoryInMb": "(integer)",
                        "maxDiskSizeInMb": "(integer)"
                    },
                    "autoHealEnabled": "(boolean)",
                    "autoHealRules": {
                        "triggers": {
                            "requests": {
                                "count": "(integer)",
                                "timeInterval": "(string)"
                            },
                            "privateBytesInKB": "(integer)",
                            "statusCodes": [
                                {
                                    "status": "(integer)",
                                    "subStatus": "(integer)",
                                    "win32Status": "(integer)",
                                    "count": "(integer)",
                                    "timeInterval": "(string)"
                                }
                            ],
                            "slowRequests": {
                                "timeTaken": "(string)",
                                "count": "(integer)",
                                "timeInterval": "(string)"
                            }
                        },
                        "actions": {
                            "actionType": "(string)",
                            "customAction": {
                                "exe": "(string)",
                                "parameters": "(string)"
                            }
                        }
                    },
                    "tracingOptions": "(string)",
                    "vnetName": "(string)",
                    "siteAuthEnabled": "(boolean)",
                    "siteAuthSettings": {
                        "clientId": "(string)",
                        "issuer": "(string)",
                        "aadClientId": "(string)",
                        "openIdIssuer": "(string)"
                    },
                    "autoSwapSlotName": "(string)"
                },
                "trafficManagerHostNames": [
                    "(string)"
                ],
                "sku": "(string)",
                "premiumAppDeployed": "(boolean)",
                "scmSiteAlsoStopped": "(boolean)",
                "targetSwapSlot": "(string)",
                "hostingEnvironment": "(string)",
                "microService": "(string)",
                "gatewaySiteName": "(string)",
                "clientAffinityEnabled": "(boolean)",
                "clientCertEnabled": "(boolean)",
                "kind": "(string)",
                "outboundIpAddresses": "(string)",
                "cloningInfo": {
                    "correlationId": "(string)",
                    "overwrite": "(boolean)",
                    "cloneCustomHostNames": "(boolean)",
                    "source": {
                        "name": "(string)",
                        "location": "(string)",
                        "resourceGroupName": "(string)",
                        "subscriptionId": "(string)",
                        "slot": "(string)"
                    },
                    "hostingEnvironment": "(string)"
                }
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "name": "Name of web app",
                "state": "State of the web app",
                "hostNames": [
                    null
                ],
                "repositorySiteName": "Name of repository site",
                "usageState": "State indicating whether web app has exceeded its quota usage",
                "enabled": "True if the site is enabled; otherwise, false. Setting this  value to false disables the site (takes the site off line).",
                "enabledHostNames": [
                    null
                ],
                "availabilityState": "Management information availability state for the web app. Possible values are Normal or Limited. \r\n            Normal means that the site is running correctly and that management information for the site is available. \r\n            Limited means that only partial management information for the site is available and that detailed site information is unavailable.",
                "hostNameSslStates": [
                    {
                        "name": "Host name",
                        "sslState": "SSL type",
                        "virtualIP": "Virtual IP address assigned to the host name if IP based SSL is enabled",
                        "thumbprint": "SSL cert thumbprint",
                        "toUpdate": "Set this flag to update existing host name",
                        "toUpdateIpBasedSsl": "Set this flag to update existing host name"
                    }
                ],
                "serverFarm": "App service plan web app is assoicated with",
                "lastModifiedTimeUtc": "Last time web app was modified in UTC",
                "siteConfig": {
                    "numberOfWorkers": "Number of workers",
                    "defaultDocuments": [
                        null
                    ],
                    "netFrameworkVersion": "Net Framework Version",
                    "phpVersion": "Version of PHP",
                    "pythonVersion": "Version of Python",
                    "requestTracingEnabled": "Enable request tracing",
                    "requestTracingExpirationTime": "Request tracing expiration time",
                    "remoteDebuggingEnabled": "Remote Debugging Enabled",
                    "remoteDebuggingVersion": "Remote Debugging Version",
                    "httpLoggingEnabled": "HTTP logging Enabled",
                    "logsDirectorySizeLimit": "HTTP Logs Directory size limit",
                    "detailedErrorLoggingEnabled": "Detailed error logging enabled",
                    "publishingUsername": "Publishing user name",
                    "publishingPassword": "Publishing password",
                    "appSettings": [
                        {
                            "name": "Pair name",
                            "value": "Pair value"
                        }
                    ],
                    "metadata": [
                        {
                            "name": "Pair name",
                            "value": "Pair value"
                        }
                    ],
                    "connectionStrings": [
                        {
                            "name": "Name of connection string",
                            "connectionString": "Connection string value",
                            "type": "Type of database"
                        }
                    ],
                    "handlerMappings": [
                        {
                            "extension": "Requests with this extension will be handled using the specified FastCGI application.",
                            "scriptProcessor": "The absolute path to the FastCGI application.",
                            "arguments": "Command-line arguments to be passed to the script processor."
                        }
                    ],
                    "documentRoot": "Document root",
                    "scmType": "SCM type",
                    "use32BitWorkerProcess": "Use 32 bit worker process",
                    "webSocketsEnabled": "Web socket enabled.",
                    "alwaysOn": "Always On",
                    "javaVersion": "Java version",
                    "javaContainer": "Java container",
                    "javaContainerVersion": "Java container version",
                    "managedPipelineMode": "Managed pipeline mode",
                    "virtualApplications": [
                        {
                            "virtualDirectories": [
                                {}
                            ]
                        }
                    ],
                    "loadBalancing": "Site load balancing",
                    "experiments": {
                        "rampUpRules": [
                            {
                                "actionHostName": "Hostname of a slot to which the traffic will be redirected if decided to. E.g. mysite-stage.azurewebsites.net",
                                "reroutePercentage": "Percentage of the traffic which will be redirected to {Microsoft.Web.Hosting.Administration.RampUpRule.ActionHostName}",
                                "changeStep": "[Optional] In auto ramp up scenario this is the step to to add/remove from {Microsoft.Web.Hosting.Administration.RampUpRule.ReroutePercentage} until it reaches \r\n            {Microsoft.Web.Hosting.Administration.RampUpRule.MinReroutePercentage} or {Microsoft.Web.Hosting.Administration.RampUpRule.MaxReroutePercentage}. Site metrics are checked every N minutes specificed in {Microsoft.Web.Hosting.Administration.RampUpRule.ChangeIntervalInMinutes}.\r\n            Custom decision algorithm can be provided in TiPCallback site extension which Url can be specified in {Microsoft.Web.Hosting.Administration.RampUpRule.ChangeDecisionCallbackUrl}",
                                "changeIntervalInMinutes": "[Optional] Specifies interval in mimuntes to reevaluate ReroutePercentage",
                                "minReroutePercentage": "[Optional] Specifies lower boundary above which ReroutePercentage will stay.",
                                "maxReroutePercentage": "[Optional] Specifies upper boundary below which ReroutePercentage will stay.",
                                "changeDecisionCallbackUrl": "Custom decision algorithm can be provided in TiPCallback site extension which Url can be specified. See TiPCallback site extension for the scaffold and contracts.\r\n            https://www.siteextensions.net/packages/TiPCallback/",
                                "name": "Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment."
                            }
                        ]
                    },
                    "limits": {
                        "maxPercentageCpu": "Maximum allowed CPU usage percentage",
                        "maxMemoryInMb": "Maximum allowed memory usage in MB",
                        "maxDiskSizeInMb": "Maximum allowed disk size usage in MB"
                    },
                    "autoHealEnabled": "Auto heal enabled",
                    "autoHealRules": {
                        "triggers": {
                            "requests": {
                                "count": "Count",
                                "timeInterval": "TimeInterval"
                            },
                            "privateBytesInKB": "PrivateBytesInKB - Defines a rule based on private bytes",
                            "statusCodes": [
                                {
                                    "status": "HTTP status code",
                                    "subStatus": "SubStatus",
                                    "win32Status": "Win32 error code",
                                    "count": "Count",
                                    "timeInterval": "TimeInterval"
                                }
                            ],
                            "slowRequests": {
                                "timeTaken": "TimeTaken",
                                "count": "Count",
                                "timeInterval": "TimeInterval"
                            }
                        },
                        "actions": {
                            "actionType": "ActionType - predefined action to be taken",
                            "customAction": {
                                "exe": "Executable to be run",
                                "parameters": "Parameters for the executable"
                            }
                        }
                    },
                    "tracingOptions": "Tracing options",
                    "vnetName": "Vnet name",
                    "siteAuthEnabled": "App Service Authentication / Authorization enabled",
                    "siteAuthSettings": {
                        "clientId": "Gets or sets the unique ID of this relying party application, known as the client_id.",
                        "issuer": "Gets or sets the OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.\r\n            When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://sts.windows.net/{tenant-guid}/.\r\n            This URI is a case-sensitive identifier for the token issuer."
                    },
                    "autoSwapSlotName": "Auto swap slot name"
                },
                "trafficManagerHostNames": [
                    null
                ],
                "sku": "A pricing plan (SKU) of the server farm (App Service plan) that this web app belongs to.",
                "premiumAppDeployed": "If set indicates whether web app is deployed as a premium app",
                "scmSiteAlsoStopped": "If set indicates whether to stop SCM (KUDU) site when the web app is stopped. Default is false.",
                "targetSwapSlot": "Read-only property that specifies which slot this app will swap into",
                "hostingEnvironment": "Name of hosting environment web app belongs to",
                "microService": "",
                "gatewaySiteName": "Name of gateway app associated with web app",
                "clientAffinityEnabled": "Specifies if the client affinity is enabled when load balancing http request for multiple instances of the web app",
                "clientCertEnabled": "Specifies if the client certificate is enabled for the web app",
                "kind": "Kind of resource",
                "outboundIpAddresses": "List of comma separated IP addresses that this web app uses for outbound connections. Those can be used when configuring firewall rules for databases accessed by this web app.",
                "cloningInfo": {
                    "correlationId": "Correlation Id of cloning operation. This id ties multiple cloning operations\r\n            together to use the same snapshot",
                    "overwrite": "Overwrite destination web app",
                    "cloneCustomHostNames": "If true, clone custom hostnames from source web app",
                    "source": {
                        "name": "Name of source web app",
                        "location": "Location of web app",
                        "resourceGroupName": "Resource group of web app",
                        "subscriptionId": "Azure subscription of web app",
                        "slot": "Name of web app slot"
                    },
                    "hostingEnvironment": "Hosting environment"
                }
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "name": "(string)",
                "state": "(string)",
                "hostNames": [
                    "(string)"
                ],
                "repositorySiteName": "(string)",
                "usageState": "(string)",
                "enabled": "(boolean)",
                "enabledHostNames": [
                    "(string)"
                ],
                "availabilityState": "(string)",
                "hostNameSslStates": [
                    {
                        "name": "(string)",
                        "sslState": "(string)",
                        "virtualIP": "(string)",
                        "thumbprint": "(string)",
                        "toUpdate": "(boolean)",
                        "toUpdateIpBasedSsl": "(boolean)"
                    }
                ],
                "serverFarm": "(string)",
                "serverFarmId": "(string)",
                "lastModifiedTimeUtc": "(string)",
                "siteConfig": {
                    "numberOfWorkers": "(integer)",
                    "defaultDocuments": [
                        "(string)"
                    ],
                    "netFrameworkVersion": "(string)",
                    "phpVersion": "(string)",
                    "pythonVersion": "(string)",
                    "requestTracingEnabled": "(boolean)",
                    "requestTracingExpirationTime": "(string)",
                    "remoteDebuggingEnabled": "(boolean)",
                    "remoteDebuggingVersion": "(string)",
                    "httpLoggingEnabled": "(boolean)",
                    "logsDirectorySizeLimit": "(integer)",
                    "detailedErrorLoggingEnabled": "(boolean)",
                    "publishingUsername": "(string)",
                    "publishingPassword": "(string)",
                    "appSettings": [
                        {
                            "name": "(string)",
                            "value": "(string)"
                        }
                    ],
                    "metadata": [
                        {
                            "name": "(string)",
                            "value": "(string)"
                        }
                    ],
                    "connectionStrings": [
                        {
                            "name": "(string)",
                            "connectionString": "(string)",
                            "type": "(string)"
                        }
                    ],
                    "handlerMappings": [
                        {
                            "extension": "(string)",
                            "scriptProcessor": "(string)",
                            "arguments": "(string)"
                        }
                    ],
                    "documentRoot": "(string)",
                    "scmType": "(string)",
                    "use32BitWorkerProcess": "(boolean)",
                    "webSocketsEnabled": "(boolean)",
                    "alwaysOn": "(boolean)",
                    "javaVersion": "(string)",
                    "javaContainer": "(string)",
                    "javaContainerVersion": "(string)",
                    "managedPipelineMode": "(string)",
                    "virtualApplications": [
                        {
                            "virtualPath": "(string)",
                            "physicalPath": "(string)",
                            "preloadEnabled": "(boolean)",
                            "virtualDirectories": [
                                {
                                    "virtualPath": "(string)",
                                    "physicalPath": "(string)"
                                }
                            ]
                        }
                    ],
                    "loadBalancing": "(string)",
                    "experiments": {
                        "rampUpRules": [
                            {
                                "actionHostName": "(string)",
                                "reroutePercentage": "(number)",
                                "changeStep": "(number)",
                                "changeIntervalInMinutes": "(integer)",
                                "minReroutePercentage": "(number)",
                                "maxReroutePercentage": "(number)",
                                "changeDecisionCallbackUrl": "(string)",
                                "name": "(string)"
                            }
                        ]
                    },
                    "limits": {
                        "maxPercentageCpu": "(number)",
                        "maxMemoryInMb": "(integer)",
                        "maxDiskSizeInMb": "(integer)"
                    },
                    "autoHealEnabled": "(boolean)",
                    "autoHealRules": {
                        "triggers": {
                            "requests": {
                                "count": "(integer)",
                                "timeInterval": "(string)"
                            },
                            "privateBytesInKB": "(integer)",
                            "statusCodes": [
                                {
                                    "status": "(integer)",
                                    "subStatus": "(integer)",
                                    "win32Status": "(integer)",
                                    "count": "(integer)",
                                    "timeInterval": "(string)"
                                }
                            ],
                            "slowRequests": {
                                "timeTaken": "(string)",
                                "count": "(integer)",
                                "timeInterval": "(string)"
                            }
                        },
                        "actions": {
                            "actionType": "(string)",
                            "customAction": {
                                "exe": "(string)",
                                "parameters": "(string)"
                            }
                        }
                    },
                    "tracingOptions": "(string)",
                    "vnetName": "(string)",
                    "siteAuthEnabled": "(boolean)",
                    "siteAuthSettings": {
                        "clientId": "(string)",
                        "issuer": "(string)",
                        "aadClientId": "(string)",
                        "openIdIssuer": "(string)"
                    },
                    "autoSwapSlotName": "(string)"
                },
                "trafficManagerHostNames": [
                    "(string)"
                ],
                "sku": "(string)",
                "premiumAppDeployed": "(boolean)",
                "scmSiteAlsoStopped": "(boolean)",
                "targetSwapSlot": "(string)",
                "hostingEnvironment": "(string)",
                "microService": "(string)",
                "gatewaySiteName": "(string)",
                "clientAffinityEnabled": "(boolean)",
                "clientCertEnabled": "(boolean)",
                "kind": "(string)",
                "outboundIpAddresses": "(string)",
                "cloningInfo": {
                    "correlationId": "(string)",
                    "overwrite": "(boolean)",
                    "cloneCustomHostNames": "(boolean)",
                    "source": {
                        "name": "(string)",
                        "location": "(string)",
                        "resourceGroupName": "(string)",
                        "subscriptionId": "(string)",
                        "slot": "(string)"
                    },
                    "hostingEnvironment": "(string)"
                }
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "name": "Name of web app",
                "state": "State of the web app",
                "hostNames": [
                    null
                ],
                "repositorySiteName": "Name of repository site",
                "usageState": "State indicating whether web app has exceeded its quota usage",
                "enabled": "True if the site is enabled; otherwise, false. Setting this  value to false disables the site (takes the site off line).",
                "enabledHostNames": [
                    null
                ],
                "availabilityState": "Management information availability state for the web app. Possible values are Normal or Limited. \r\n            Normal means that the site is running correctly and that management information for the site is available. \r\n            Limited means that only partial management information for the site is available and that detailed site information is unavailable.",
                "hostNameSslStates": [
                    {
                        "name": "Host name",
                        "sslState": "SSL type",
                        "virtualIP": "Virtual IP address assigned to the host name if IP based SSL is enabled",
                        "thumbprint": "SSL cert thumbprint",
                        "toUpdate": "Set this flag to update existing host name",
                        "toUpdateIpBasedSsl": "Set this flag to update existing host name"
                    }
                ],
                "serverFarm": "App service plan web app is assoicated with",
                "lastModifiedTimeUtc": "Last time web app was modified in UTC",
                "siteConfig": {
                    "numberOfWorkers": "Number of workers",
                    "defaultDocuments": [
                        null
                    ],
                    "netFrameworkVersion": "Net Framework Version",
                    "phpVersion": "Version of PHP",
                    "pythonVersion": "Version of Python",
                    "requestTracingEnabled": "Enable request tracing",
                    "requestTracingExpirationTime": "Request tracing expiration time",
                    "remoteDebuggingEnabled": "Remote Debugging Enabled",
                    "remoteDebuggingVersion": "Remote Debugging Version",
                    "httpLoggingEnabled": "HTTP logging Enabled",
                    "logsDirectorySizeLimit": "HTTP Logs Directory size limit",
                    "detailedErrorLoggingEnabled": "Detailed error logging enabled",
                    "publishingUsername": "Publishing user name",
                    "publishingPassword": "Publishing password",
                    "appSettings": [
                        {
                            "name": "Pair name",
                            "value": "Pair value"
                        }
                    ],
                    "metadata": [
                        {
                            "name": "Pair name",
                            "value": "Pair value"
                        }
                    ],
                    "connectionStrings": [
                        {
                            "name": "Name of connection string",
                            "connectionString": "Connection string value",
                            "type": "Type of database"
                        }
                    ],
                    "handlerMappings": [
                        {
                            "extension": "Requests with this extension will be handled using the specified FastCGI application.",
                            "scriptProcessor": "The absolute path to the FastCGI application.",
                            "arguments": "Command-line arguments to be passed to the script processor."
                        }
                    ],
                    "documentRoot": "Document root",
                    "scmType": "SCM type",
                    "use32BitWorkerProcess": "Use 32 bit worker process",
                    "webSocketsEnabled": "Web socket enabled.",
                    "alwaysOn": "Always On",
                    "javaVersion": "Java version",
                    "javaContainer": "Java container",
                    "javaContainerVersion": "Java container version",
                    "managedPipelineMode": "Managed pipeline mode",
                    "virtualApplications": [
                        {
                            "virtualDirectories": [
                                {}
                            ]
                        }
                    ],
                    "loadBalancing": "Site load balancing",
                    "experiments": {
                        "rampUpRules": [
                            {
                                "actionHostName": "Hostname of a slot to which the traffic will be redirected if decided to. E.g. mysite-stage.azurewebsites.net",
                                "reroutePercentage": "Percentage of the traffic which will be redirected to {Microsoft.Web.Hosting.Administration.RampUpRule.ActionHostName}",
                                "changeStep": "[Optional] In auto ramp up scenario this is the step to to add/remove from {Microsoft.Web.Hosting.Administration.RampUpRule.ReroutePercentage} until it reaches \r\n            {Microsoft.Web.Hosting.Administration.RampUpRule.MinReroutePercentage} or {Microsoft.Web.Hosting.Administration.RampUpRule.MaxReroutePercentage}. Site metrics are checked every N minutes specificed in {Microsoft.Web.Hosting.Administration.RampUpRule.ChangeIntervalInMinutes}.\r\n            Custom decision algorithm can be provided in TiPCallback site extension which Url can be specified in {Microsoft.Web.Hosting.Administration.RampUpRule.ChangeDecisionCallbackUrl}",
                                "changeIntervalInMinutes": "[Optional] Specifies interval in mimuntes to reevaluate ReroutePercentage",
                                "minReroutePercentage": "[Optional] Specifies lower boundary above which ReroutePercentage will stay.",
                                "maxReroutePercentage": "[Optional] Specifies upper boundary below which ReroutePercentage will stay.",
                                "changeDecisionCallbackUrl": "Custom decision algorithm can be provided in TiPCallback site extension which Url can be specified. See TiPCallback site extension for the scaffold and contracts.\r\n            https://www.siteextensions.net/packages/TiPCallback/",
                                "name": "Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment."
                            }
                        ]
                    },
                    "limits": {
                        "maxPercentageCpu": "Maximum allowed CPU usage percentage",
                        "maxMemoryInMb": "Maximum allowed memory usage in MB",
                        "maxDiskSizeInMb": "Maximum allowed disk size usage in MB"
                    },
                    "autoHealEnabled": "Auto heal enabled",
                    "autoHealRules": {
                        "triggers": {
                            "requests": {
                                "count": "Count",
                                "timeInterval": "TimeInterval"
                            },
                            "privateBytesInKB": "PrivateBytesInKB - Defines a rule based on private bytes",
                            "statusCodes": [
                                {
                                    "status": "HTTP status code",
                                    "subStatus": "SubStatus",
                                    "win32Status": "Win32 error code",
                                    "count": "Count",
                                    "timeInterval": "TimeInterval"
                                }
                            ],
                            "slowRequests": {
                                "timeTaken": "TimeTaken",
                                "count": "Count",
                                "timeInterval": "TimeInterval"
                            }
                        },
                        "actions": {
                            "actionType": "ActionType - predefined action to be taken",
                            "customAction": {
                                "exe": "Executable to be run",
                                "parameters": "Parameters for the executable"
                            }
                        }
                    },
                    "tracingOptions": "Tracing options",
                    "vnetName": "Vnet name",
                    "siteAuthEnabled": "App Service Authentication / Authorization enabled",
                    "siteAuthSettings": {
                        "clientId": "Gets or sets the unique ID of this relying party application, known as the client_id.",
                        "issuer": "Gets or sets the OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.\r\n            When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://sts.windows.net/{tenant-guid}/.\r\n            This URI is a case-sensitive identifier for the token issuer."
                    },
                    "autoSwapSlotName": "Auto swap slot name"
                },
                "trafficManagerHostNames": [
                    null
                ],
                "sku": "A pricing plan (SKU) of the server farm (App Service plan) that this web app belongs to.",
                "premiumAppDeployed": "If set indicates whether web app is deployed as a premium app",
                "scmSiteAlsoStopped": "If set indicates whether to stop SCM (KUDU) site when the web app is stopped. Default is false.",
                "targetSwapSlot": "Read-only property that specifies which slot this app will swap into",
                "hostingEnvironment": "Name of hosting environment web app belongs to",
                "microService": "",
                "gatewaySiteName": "Name of gateway app associated with web app",
                "clientAffinityEnabled": "Specifies if the client affinity is enabled when load balancing http request for multiple instances of the web app",
                "clientCertEnabled": "Specifies if the client certificate is enabled for the web app",
                "kind": "Kind of resource",
                "outboundIpAddresses": "List of comma separated IP addresses that this web app uses for outbound connections. Those can be used when configuring firewall rules for databases accessed by this web app.",
                "cloningInfo": {
                    "correlationId": "Correlation Id of cloning operation. This id ties multiple cloning operations\r\n            together to use the same snapshot",
                    "overwrite": "Overwrite destination web app",
                    "cloneCustomHostNames": "If true, clone custom hostnames from source web app",
                    "source": {
                        "name": "Name of source web app",
                        "location": "Location of web app",
                        "resourceGroupName": "Resource group of web app",
                        "subscriptionId": "Azure subscription of web app",
                        "slot": "Name of web app slot"
                    },
                    "hostingEnvironment": "Hosting environment"
                }
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "name": "(string)",
                "state": "(string)",
                "hostNames": [
                    "(string)"
                ],
                "repositorySiteName": "(string)",
                "usageState": "(string)",
                "enabled": "(boolean)",
                "enabledHostNames": [
                    "(string)"
                ],
                "availabilityState": "(string)",
                "hostNameSslStates": [
                    {
                        "name": "(string)",
                        "sslState": "(string)",
                        "virtualIP": "(string)",
                        "thumbprint": "(string)",
                        "toUpdate": "(boolean)",
                        "toUpdateIpBasedSsl": "(boolean)"
                    }
                ],
                "serverFarm": "(string)",
                "serverFarmId": "(string)",
                "lastModifiedTimeUtc": "(string)",
                "siteConfig": {
                    "numberOfWorkers": "(integer)",
                    "defaultDocuments": [
                        "(string)"
                    ],
                    "netFrameworkVersion": "(string)",
                    "phpVersion": "(string)",
                    "pythonVersion": "(string)",
                    "requestTracingEnabled": "(boolean)",
                    "requestTracingExpirationTime": "(string)",
                    "remoteDebuggingEnabled": "(boolean)",
                    "remoteDebuggingVersion": "(string)",
                    "httpLoggingEnabled": "(boolean)",
                    "logsDirectorySizeLimit": "(integer)",
                    "detailedErrorLoggingEnabled": "(boolean)",
                    "publishingUsername": "(string)",
                    "publishingPassword": "(string)",
                    "appSettings": [
                        {
                            "name": "(string)",
                            "value": "(string)"
                        }
                    ],
                    "metadata": [
                        {
                            "name": "(string)",
                            "value": "(string)"
                        }
                    ],
                    "connectionStrings": [
                        {
                            "name": "(string)",
                            "connectionString": "(string)",
                            "type": "(string)"
                        }
                    ],
                    "handlerMappings": [
                        {
                            "extension": "(string)",
                            "scriptProcessor": "(string)",
                            "arguments": "(string)"
                        }
                    ],
                    "documentRoot": "(string)",
                    "scmType": "(string)",
                    "use32BitWorkerProcess": "(boolean)",
                    "webSocketsEnabled": "(boolean)",
                    "alwaysOn": "(boolean)",
                    "javaVersion": "(string)",
                    "javaContainer": "(string)",
                    "javaContainerVersion": "(string)",
                    "managedPipelineMode": "(string)",
                    "virtualApplications": [
                        {
                            "virtualPath": "(string)",
                            "physicalPath": "(string)",
                            "preloadEnabled": "(boolean)",
                            "virtualDirectories": [
                                {
                                    "virtualPath": "(string)",
                                    "physicalPath": "(string)"
                                }
                            ]
                        }
                    ],
                    "loadBalancing": "(string)",
                    "experiments": {
                        "rampUpRules": [
                            {
                                "actionHostName": "(string)",
                                "reroutePercentage": "(number)",
                                "changeStep": "(number)",
                                "changeIntervalInMinutes": "(integer)",
                                "minReroutePercentage": "(number)",
                                "maxReroutePercentage": "(number)",
                                "changeDecisionCallbackUrl": "(string)",
                                "name": "(string)"
                            }
                        ]
                    },
                    "limits": {
                        "maxPercentageCpu": "(number)",
                        "maxMemoryInMb": "(integer)",
                        "maxDiskSizeInMb": "(integer)"
                    },
                    "autoHealEnabled": "(boolean)",
                    "autoHealRules": {
                        "triggers": {
                            "requests": {
                                "count": "(integer)",
                                "timeInterval": "(string)"
                            },
                            "privateBytesInKB": "(integer)",
                            "statusCodes": [
                                {
                                    "status": "(integer)",
                                    "subStatus": "(integer)",
                                    "win32Status": "(integer)",
                                    "count": "(integer)",
                                    "timeInterval": "(string)"
                                }
                            ],
                            "slowRequests": {
                                "timeTaken": "(string)",
                                "count": "(integer)",
                                "timeInterval": "(string)"
                            }
                        },
                        "actions": {
                            "actionType": "(string)",
                            "customAction": {
                                "exe": "(string)",
                                "parameters": "(string)"
                            }
                        }
                    },
                    "tracingOptions": "(string)",
                    "vnetName": "(string)",
                    "siteAuthEnabled": "(boolean)",
                    "siteAuthSettings": {
                        "clientId": "(string)",
                        "issuer": "(string)",
                        "aadClientId": "(string)",
                        "openIdIssuer": "(string)"
                    },
                    "autoSwapSlotName": "(string)"
                },
                "trafficManagerHostNames": [
                    "(string)"
                ],
                "sku": "(string)",
                "premiumAppDeployed": "(boolean)",
                "scmSiteAlsoStopped": "(boolean)",
                "targetSwapSlot": "(string)",
                "hostingEnvironment": "(string)",
                "microService": "(string)",
                "gatewaySiteName": "(string)",
                "clientAffinityEnabled": "(boolean)",
                "clientCertEnabled": "(boolean)",
                "kind": "(string)",
                "outboundIpAddresses": "(string)",
                "cloningInfo": {
                    "correlationId": "(string)",
                    "overwrite": "(boolean)",
                    "cloneCustomHostNames": "(boolean)",
                    "source": {
                        "name": "(string)",
                        "location": "(string)",
                        "resourceGroupName": "(string)",
                        "subscriptionId": "(string)",
                        "slot": "(string)"
                    },
                    "hostingEnvironment": "(string)"
                }
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "name": "Name of web app",
                "state": "State of the web app",
                "hostNames": [
                    null
                ],
                "repositorySiteName": "Name of repository site",
                "usageState": "State indicating whether web app has exceeded its quota usage",
                "enabled": "True if the site is enabled; otherwise, false. Setting this  value to false disables the site (takes the site off line).",
                "enabledHostNames": [
                    null
                ],
                "availabilityState": "Management information availability state for the web app. Possible values are Normal or Limited. \r\n            Normal means that the site is running correctly and that management information for the site is available. \r\n            Limited means that only partial management information for the site is available and that detailed site information is unavailable.",
                "hostNameSslStates": [
                    {
                        "name": "Host name",
                        "sslState": "SSL type",
                        "virtualIP": "Virtual IP address assigned to the host name if IP based SSL is enabled",
                        "thumbprint": "SSL cert thumbprint",
                        "toUpdate": "Set this flag to update existing host name",
                        "toUpdateIpBasedSsl": "Set this flag to update existing host name"
                    }
                ],
                "serverFarm": "App service plan web app is assoicated with",
                "lastModifiedTimeUtc": "Last time web app was modified in UTC",
                "siteConfig": {
                    "numberOfWorkers": "Number of workers",
                    "defaultDocuments": [
                        null
                    ],
                    "netFrameworkVersion": "Net Framework Version",
                    "phpVersion": "Version of PHP",
                    "pythonVersion": "Version of Python",
                    "requestTracingEnabled": "Enable request tracing",
                    "requestTracingExpirationTime": "Request tracing expiration time",
                    "remoteDebuggingEnabled": "Remote Debugging Enabled",
                    "remoteDebuggingVersion": "Remote Debugging Version",
                    "httpLoggingEnabled": "HTTP logging Enabled",
                    "logsDirectorySizeLimit": "HTTP Logs Directory size limit",
                    "detailedErrorLoggingEnabled": "Detailed error logging enabled",
                    "publishingUsername": "Publishing user name",
                    "publishingPassword": "Publishing password",
                    "appSettings": [
                        {
                            "name": "Pair name",
                            "value": "Pair value"
                        }
                    ],
                    "metadata": [
                        {
                            "name": "Pair name",
                            "value": "Pair value"
                        }
                    ],
                    "connectionStrings": [
                        {
                            "name": "Name of connection string",
                            "connectionString": "Connection string value",
                            "type": "Type of database"
                        }
                    ],
                    "handlerMappings": [
                        {
                            "extension": "Requests with this extension will be handled using the specified FastCGI application.",
                            "scriptProcessor": "The absolute path to the FastCGI application.",
                            "arguments": "Command-line arguments to be passed to the script processor."
                        }
                    ],
                    "documentRoot": "Document root",
                    "scmType": "SCM type",
                    "use32BitWorkerProcess": "Use 32 bit worker process",
                    "webSocketsEnabled": "Web socket enabled.",
                    "alwaysOn": "Always On",
                    "javaVersion": "Java version",
                    "javaContainer": "Java container",
                    "javaContainerVersion": "Java container version",
                    "managedPipelineMode": "Managed pipeline mode",
                    "virtualApplications": [
                        {
                            "virtualDirectories": [
                                {}
                            ]
                        }
                    ],
                    "loadBalancing": "Site load balancing",
                    "experiments": {
                        "rampUpRules": [
                            {
                                "actionHostName": "Hostname of a slot to which the traffic will be redirected if decided to. E.g. mysite-stage.azurewebsites.net",
                                "reroutePercentage": "Percentage of the traffic which will be redirected to {Microsoft.Web.Hosting.Administration.RampUpRule.ActionHostName}",
                                "changeStep": "[Optional] In auto ramp up scenario this is the step to to add/remove from {Microsoft.Web.Hosting.Administration.RampUpRule.ReroutePercentage} until it reaches \r\n            {Microsoft.Web.Hosting.Administration.RampUpRule.MinReroutePercentage} or {Microsoft.Web.Hosting.Administration.RampUpRule.MaxReroutePercentage}. Site metrics are checked every N minutes specificed in {Microsoft.Web.Hosting.Administration.RampUpRule.ChangeIntervalInMinutes}.\r\n            Custom decision algorithm can be provided in TiPCallback site extension which Url can be specified in {Microsoft.Web.Hosting.Administration.RampUpRule.ChangeDecisionCallbackUrl}",
                                "changeIntervalInMinutes": "[Optional] Specifies interval in mimuntes to reevaluate ReroutePercentage",
                                "minReroutePercentage": "[Optional] Specifies lower boundary above which ReroutePercentage will stay.",
                                "maxReroutePercentage": "[Optional] Specifies upper boundary below which ReroutePercentage will stay.",
                                "changeDecisionCallbackUrl": "Custom decision algorithm can be provided in TiPCallback site extension which Url can be specified. See TiPCallback site extension for the scaffold and contracts.\r\n            https://www.siteextensions.net/packages/TiPCallback/",
                                "name": "Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment."
                            }
                        ]
                    },
                    "limits": {
                        "maxPercentageCpu": "Maximum allowed CPU usage percentage",
                        "maxMemoryInMb": "Maximum allowed memory usage in MB",
                        "maxDiskSizeInMb": "Maximum allowed disk size usage in MB"
                    },
                    "autoHealEnabled": "Auto heal enabled",
                    "autoHealRules": {
                        "triggers": {
                            "requests": {
                                "count": "Count",
                                "timeInterval": "TimeInterval"
                            },
                            "privateBytesInKB": "PrivateBytesInKB - Defines a rule based on private bytes",
                            "statusCodes": [
                                {
                                    "status": "HTTP status code",
                                    "subStatus": "SubStatus",
                                    "win32Status": "Win32 error code",
                                    "count": "Count",
                                    "timeInterval": "TimeInterval"
                                }
                            ],
                            "slowRequests": {
                                "timeTaken": "TimeTaken",
                                "count": "Count",
                                "timeInterval": "TimeInterval"
                            }
                        },
                        "actions": {
                            "actionType": "ActionType - predefined action to be taken",
                            "customAction": {
                                "exe": "Executable to be run",
                                "parameters": "Parameters for the executable"
                            }
                        }
                    },
                    "tracingOptions": "Tracing options",
                    "vnetName": "Vnet name",
                    "siteAuthEnabled": "App Service Authentication / Authorization enabled",
                    "siteAuthSettings": {
                        "clientId": "Gets or sets the unique ID of this relying party application, known as the client_id.",
                        "issuer": "Gets or sets the OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.\r\n            When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://sts.windows.net/{tenant-guid}/.\r\n            This URI is a case-sensitive identifier for the token issuer."
                    },
                    "autoSwapSlotName": "Auto swap slot name"
                },
                "trafficManagerHostNames": [
                    null
                ],
                "sku": "A pricing plan (SKU) of the server farm (App Service plan) that this web app belongs to.",
                "premiumAppDeployed": "If set indicates whether web app is deployed as a premium app",
                "scmSiteAlsoStopped": "If set indicates whether to stop SCM (KUDU) site when the web app is stopped. Default is false.",
                "targetSwapSlot": "Read-only property that specifies which slot this app will swap into",
                "hostingEnvironment": "Name of hosting environment web app belongs to",
                "microService": "",
                "gatewaySiteName": "Name of gateway app associated with web app",
                "clientAffinityEnabled": "Specifies if the client affinity is enabled when load balancing http request for multiple instances of the web app",
                "clientCertEnabled": "Specifies if the client certificate is enabled for the web app",
                "kind": "Kind of resource",
                "outboundIpAddresses": "List of comma separated IP addresses that this web app uses for outbound connections. Those can be used when configuring firewall rules for databases accessed by this web app.",
                "cloningInfo": {
                    "correlationId": "Correlation Id of cloning operation. This id ties multiple cloning operations\r\n            together to use the same snapshot",
                    "overwrite": "Overwrite destination web app",
                    "cloneCustomHostNames": "If true, clone custom hostnames from source web app",
                    "source": {
                        "name": "Name of source web app",
                        "location": "Location of web app",
                        "resourceGroupName": "Resource group of web app",
                        "subscriptionId": "Azure subscription of web app",
                        "slot": "Name of web app slot"
                    },
                    "hostingEnvironment": "Hosting environment"
                }
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/recover",
        "RequestBody": {
            "snapshotTime": "(string)",
            "siteName": "(string)",
            "slotName": "(string)"
        },
        "RequestBodyDoc": {
            "snapshotTime": "Point in time in which the site recover should be attempted.",
            "siteName": "[Optional] Destination web app name into which web app should be recovered. This is case when new web app should be created instead.",
            "slotName": "[Optional] Destination web app slot name into which web app should be recovered"
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/recover",
        "RequestBody": {
            "snapshotTime": "(string)",
            "siteName": "(string)",
            "slotName": "(string)"
        },
        "RequestBodyDoc": {
            "snapshotTime": "Point in time in which the site recover should be attempted.",
            "siteName": "[Optional] Destination web app name into which web app should be recovered. This is case when new web app should be created instead.",
            "slotName": "[Optional] Destination web app slot name into which web app should be recovered"
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "name": "(string)",
                "siteName": "(string)",
                "domainId": "(string)",
                "azureResourceName": "(string)",
                "azureResourceType": "(string)",
                "customHostNameDnsRecordType": "(string)",
                "hostNameType": "(string)"
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "name": "Hostname",
                "siteName": "Web app name",
                "domainId": "Fully qualified ARM domain resource URI",
                "azureResourceName": "Azure resource name",
                "azureResourceType": "Azure resource type",
                "customHostNameDnsRecordType": "Custom DNS record type",
                "hostNameType": "Host name type"
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "name": "(string)",
                "siteName": "(string)",
                "domainId": "(string)",
                "azureResourceName": "(string)",
                "azureResourceType": "(string)",
                "customHostNameDnsRecordType": "(string)",
                "hostNameType": "(string)"
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "name": "Hostname",
                "siteName": "Web app name",
                "domainId": "Fully qualified ARM domain resource URI",
                "azureResourceName": "Azure resource name",
                "azureResourceType": "Azure resource type",
                "customHostNameDnsRecordType": "Custom DNS record type",
                "hostNameType": "Host name type"
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "numberOfWorkers": "(integer)",
                "defaultDocuments": [
                    "(string)"
                ],
                "netFrameworkVersion": "(string)",
                "phpVersion": "(string)",
                "pythonVersion": "(string)",
                "requestTracingEnabled": "(boolean)",
                "requestTracingExpirationTime": "(string)",
                "remoteDebuggingEnabled": "(boolean)",
                "remoteDebuggingVersion": "(string)",
                "httpLoggingEnabled": "(boolean)",
                "logsDirectorySizeLimit": "(integer)",
                "detailedErrorLoggingEnabled": "(boolean)",
                "publishingUsername": "(string)",
                "publishingPassword": "(string)",
                "appSettings": [
                    {
                        "name": "(string)",
                        "value": "(string)"
                    }
                ],
                "metadata": [
                    {
                        "name": "(string)",
                        "value": "(string)"
                    }
                ],
                "connectionStrings": [
                    {
                        "name": "(string)",
                        "connectionString": "(string)",
                        "type": "(string)"
                    }
                ],
                "handlerMappings": [
                    {
                        "extension": "(string)",
                        "scriptProcessor": "(string)",
                        "arguments": "(string)"
                    }
                ],
                "documentRoot": "(string)",
                "scmType": "(string)",
                "use32BitWorkerProcess": "(boolean)",
                "webSocketsEnabled": "(boolean)",
                "alwaysOn": "(boolean)",
                "javaVersion": "(string)",
                "javaContainer": "(string)",
                "javaContainerVersion": "(string)",
                "managedPipelineMode": "(string)",
                "virtualApplications": [
                    {
                        "virtualPath": "(string)",
                        "physicalPath": "(string)",
                        "preloadEnabled": "(boolean)",
                        "virtualDirectories": [
                            {
                                "virtualPath": "(string)",
                                "physicalPath": "(string)"
                            }
                        ]
                    }
                ],
                "loadBalancing": "(string)",
                "experiments": {
                    "rampUpRules": [
                        {
                            "actionHostName": "(string)",
                            "reroutePercentage": "(number)",
                            "changeStep": "(number)",
                            "changeIntervalInMinutes": "(integer)",
                            "minReroutePercentage": "(number)",
                            "maxReroutePercentage": "(number)",
                            "changeDecisionCallbackUrl": "(string)",
                            "name": "(string)"
                        }
                    ]
                },
                "limits": {
                    "maxPercentageCpu": "(number)",
                    "maxMemoryInMb": "(integer)",
                    "maxDiskSizeInMb": "(integer)"
                },
                "autoHealEnabled": "(boolean)",
                "autoHealRules": {
                    "triggers": {
                        "requests": {
                            "count": "(integer)",
                            "timeInterval": "(string)"
                        },
                        "privateBytesInKB": "(integer)",
                        "statusCodes": [
                            {
                                "status": "(integer)",
                                "subStatus": "(integer)",
                                "win32Status": "(integer)",
                                "count": "(integer)",
                                "timeInterval": "(string)"
                            }
                        ],
                        "slowRequests": {
                            "timeTaken": "(string)",
                            "count": "(integer)",
                            "timeInterval": "(string)"
                        }
                    },
                    "actions": {
                        "actionType": "(string)",
                        "customAction": {
                            "exe": "(string)",
                            "parameters": "(string)"
                        }
                    }
                },
                "tracingOptions": "(string)",
                "vnetName": "(string)",
                "siteAuthEnabled": "(boolean)",
                "siteAuthSettings": {
                    "clientId": "(string)",
                    "issuer": "(string)",
                    "aadClientId": "(string)",
                    "openIdIssuer": "(string)"
                },
                "autoSwapSlotName": "(string)"
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "numberOfWorkers": "Number of workers",
                "defaultDocuments": [
                    null
                ],
                "netFrameworkVersion": "Net Framework Version",
                "phpVersion": "Version of PHP",
                "pythonVersion": "Version of Python",
                "requestTracingEnabled": "Enable request tracing",
                "requestTracingExpirationTime": "Request tracing expiration time",
                "remoteDebuggingEnabled": "Remote Debugging Enabled",
                "remoteDebuggingVersion": "Remote Debugging Version",
                "httpLoggingEnabled": "HTTP logging Enabled",
                "logsDirectorySizeLimit": "HTTP Logs Directory size limit",
                "detailedErrorLoggingEnabled": "Detailed error logging enabled",
                "publishingUsername": "Publishing user name",
                "publishingPassword": "Publishing password",
                "appSettings": [
                    {
                        "name": "Pair name",
                        "value": "Pair value"
                    }
                ],
                "metadata": [
                    {
                        "name": "Pair name",
                        "value": "Pair value"
                    }
                ],
                "connectionStrings": [
                    {
                        "name": "Name of connection string",
                        "connectionString": "Connection string value",
                        "type": "Type of database"
                    }
                ],
                "handlerMappings": [
                    {
                        "extension": "Requests with this extension will be handled using the specified FastCGI application.",
                        "scriptProcessor": "The absolute path to the FastCGI application.",
                        "arguments": "Command-line arguments to be passed to the script processor."
                    }
                ],
                "documentRoot": "Document root",
                "scmType": "SCM type",
                "use32BitWorkerProcess": "Use 32 bit worker process",
                "webSocketsEnabled": "Web socket enabled.",
                "alwaysOn": "Always On",
                "javaVersion": "Java version",
                "javaContainer": "Java container",
                "javaContainerVersion": "Java container version",
                "managedPipelineMode": "Managed pipeline mode",
                "virtualApplications": [
                    {
                        "virtualDirectories": [
                            {}
                        ]
                    }
                ],
                "loadBalancing": "Site load balancing",
                "experiments": {
                    "rampUpRules": [
                        {
                            "actionHostName": "Hostname of a slot to which the traffic will be redirected if decided to. E.g. mysite-stage.azurewebsites.net",
                            "reroutePercentage": "Percentage of the traffic which will be redirected to {Microsoft.Web.Hosting.Administration.RampUpRule.ActionHostName}",
                            "changeStep": "[Optional] In auto ramp up scenario this is the step to to add/remove from {Microsoft.Web.Hosting.Administration.RampUpRule.ReroutePercentage} until it reaches \r\n            {Microsoft.Web.Hosting.Administration.RampUpRule.MinReroutePercentage} or {Microsoft.Web.Hosting.Administration.RampUpRule.MaxReroutePercentage}. Site metrics are checked every N minutes specificed in {Microsoft.Web.Hosting.Administration.RampUpRule.ChangeIntervalInMinutes}.\r\n            Custom decision algorithm can be provided in TiPCallback site extension which Url can be specified in {Microsoft.Web.Hosting.Administration.RampUpRule.ChangeDecisionCallbackUrl}",
                            "changeIntervalInMinutes": "[Optional] Specifies interval in mimuntes to reevaluate ReroutePercentage",
                            "minReroutePercentage": "[Optional] Specifies lower boundary above which ReroutePercentage will stay.",
                            "maxReroutePercentage": "[Optional] Specifies upper boundary below which ReroutePercentage will stay.",
                            "changeDecisionCallbackUrl": "Custom decision algorithm can be provided in TiPCallback site extension which Url can be specified. See TiPCallback site extension for the scaffold and contracts.\r\n            https://www.siteextensions.net/packages/TiPCallback/",
                            "name": "Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment."
                        }
                    ]
                },
                "limits": {
                    "maxPercentageCpu": "Maximum allowed CPU usage percentage",
                    "maxMemoryInMb": "Maximum allowed memory usage in MB",
                    "maxDiskSizeInMb": "Maximum allowed disk size usage in MB"
                },
                "autoHealEnabled": "Auto heal enabled",
                "autoHealRules": {
                    "triggers": {
                        "requests": {
                            "count": "Count",
                            "timeInterval": "TimeInterval"
                        },
                        "privateBytesInKB": "PrivateBytesInKB - Defines a rule based on private bytes",
                        "statusCodes": [
                            {
                                "status": "HTTP status code",
                                "subStatus": "SubStatus",
                                "win32Status": "Win32 error code",
                                "count": "Count",
                                "timeInterval": "TimeInterval"
                            }
                        ],
                        "slowRequests": {
                            "timeTaken": "TimeTaken",
                            "count": "Count",
                            "timeInterval": "TimeInterval"
                        }
                    },
                    "actions": {
                        "actionType": "ActionType - predefined action to be taken",
                        "customAction": {
                            "exe": "Executable to be run",
                            "parameters": "Parameters for the executable"
                        }
                    }
                },
                "tracingOptions": "Tracing options",
                "vnetName": "Vnet name",
                "siteAuthEnabled": "App Service Authentication / Authorization enabled",
                "siteAuthSettings": {
                    "clientId": "Gets or sets the unique ID of this relying party application, known as the client_id.",
                    "issuer": "Gets or sets the OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.\r\n            When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://sts.windows.net/{tenant-guid}/.\r\n            This URI is a case-sensitive identifier for the token issuer."
                },
                "autoSwapSlotName": "Auto swap slot name"
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "numberOfWorkers": "(integer)",
                "defaultDocuments": [
                    "(string)"
                ],
                "netFrameworkVersion": "(string)",
                "phpVersion": "(string)",
                "pythonVersion": "(string)",
                "requestTracingEnabled": "(boolean)",
                "requestTracingExpirationTime": "(string)",
                "remoteDebuggingEnabled": "(boolean)",
                "remoteDebuggingVersion": "(string)",
                "httpLoggingEnabled": "(boolean)",
                "logsDirectorySizeLimit": "(integer)",
                "detailedErrorLoggingEnabled": "(boolean)",
                "publishingUsername": "(string)",
                "publishingPassword": "(string)",
                "appSettings": [
                    {
                        "name": "(string)",
                        "value": "(string)"
                    }
                ],
                "metadata": [
                    {
                        "name": "(string)",
                        "value": "(string)"
                    }
                ],
                "connectionStrings": [
                    {
                        "name": "(string)",
                        "connectionString": "(string)",
                        "type": "(string)"
                    }
                ],
                "handlerMappings": [
                    {
                        "extension": "(string)",
                        "scriptProcessor": "(string)",
                        "arguments": "(string)"
                    }
                ],
                "documentRoot": "(string)",
                "scmType": "(string)",
                "use32BitWorkerProcess": "(boolean)",
                "webSocketsEnabled": "(boolean)",
                "alwaysOn": "(boolean)",
                "javaVersion": "(string)",
                "javaContainer": "(string)",
                "javaContainerVersion": "(string)",
                "managedPipelineMode": "(string)",
                "virtualApplications": [
                    {
                        "virtualPath": "(string)",
                        "physicalPath": "(string)",
                        "preloadEnabled": "(boolean)",
                        "virtualDirectories": [
                            {
                                "virtualPath": "(string)",
                                "physicalPath": "(string)"
                            }
                        ]
                    }
                ],
                "loadBalancing": "(string)",
                "experiments": {
                    "rampUpRules": [
                        {
                            "actionHostName": "(string)",
                            "reroutePercentage": "(number)",
                            "changeStep": "(number)",
                            "changeIntervalInMinutes": "(integer)",
                            "minReroutePercentage": "(number)",
                            "maxReroutePercentage": "(number)",
                            "changeDecisionCallbackUrl": "(string)",
                            "name": "(string)"
                        }
                    ]
                },
                "limits": {
                    "maxPercentageCpu": "(number)",
                    "maxMemoryInMb": "(integer)",
                    "maxDiskSizeInMb": "(integer)"
                },
                "autoHealEnabled": "(boolean)",
                "autoHealRules": {
                    "triggers": {
                        "requests": {
                            "count": "(integer)",
                            "timeInterval": "(string)"
                        },
                        "privateBytesInKB": "(integer)",
                        "statusCodes": [
                            {
                                "status": "(integer)",
                                "subStatus": "(integer)",
                                "win32Status": "(integer)",
                                "count": "(integer)",
                                "timeInterval": "(string)"
                            }
                        ],
                        "slowRequests": {
                            "timeTaken": "(string)",
                            "count": "(integer)",
                            "timeInterval": "(string)"
                        }
                    },
                    "actions": {
                        "actionType": "(string)",
                        "customAction": {
                            "exe": "(string)",
                            "parameters": "(string)"
                        }
                    }
                },
                "tracingOptions": "(string)",
                "vnetName": "(string)",
                "siteAuthEnabled": "(boolean)",
                "siteAuthSettings": {
                    "clientId": "(string)",
                    "issuer": "(string)",
                    "aadClientId": "(string)",
                    "openIdIssuer": "(string)"
                },
                "autoSwapSlotName": "(string)"
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "numberOfWorkers": "Number of workers",
                "defaultDocuments": [
                    null
                ],
                "netFrameworkVersion": "Net Framework Version",
                "phpVersion": "Version of PHP",
                "pythonVersion": "Version of Python",
                "requestTracingEnabled": "Enable request tracing",
                "requestTracingExpirationTime": "Request tracing expiration time",
                "remoteDebuggingEnabled": "Remote Debugging Enabled",
                "remoteDebuggingVersion": "Remote Debugging Version",
                "httpLoggingEnabled": "HTTP logging Enabled",
                "logsDirectorySizeLimit": "HTTP Logs Directory size limit",
                "detailedErrorLoggingEnabled": "Detailed error logging enabled",
                "publishingUsername": "Publishing user name",
                "publishingPassword": "Publishing password",
                "appSettings": [
                    {
                        "name": "Pair name",
                        "value": "Pair value"
                    }
                ],
                "metadata": [
                    {
                        "name": "Pair name",
                        "value": "Pair value"
                    }
                ],
                "connectionStrings": [
                    {
                        "name": "Name of connection string",
                        "connectionString": "Connection string value",
                        "type": "Type of database"
                    }
                ],
                "handlerMappings": [
                    {
                        "extension": "Requests with this extension will be handled using the specified FastCGI application.",
                        "scriptProcessor": "The absolute path to the FastCGI application.",
                        "arguments": "Command-line arguments to be passed to the script processor."
                    }
                ],
                "documentRoot": "Document root",
                "scmType": "SCM type",
                "use32BitWorkerProcess": "Use 32 bit worker process",
                "webSocketsEnabled": "Web socket enabled.",
                "alwaysOn": "Always On",
                "javaVersion": "Java version",
                "javaContainer": "Java container",
                "javaContainerVersion": "Java container version",
                "managedPipelineMode": "Managed pipeline mode",
                "virtualApplications": [
                    {
                        "virtualDirectories": [
                            {}
                        ]
                    }
                ],
                "loadBalancing": "Site load balancing",
                "experiments": {
                    "rampUpRules": [
                        {
                            "actionHostName": "Hostname of a slot to which the traffic will be redirected if decided to. E.g. mysite-stage.azurewebsites.net",
                            "reroutePercentage": "Percentage of the traffic which will be redirected to {Microsoft.Web.Hosting.Administration.RampUpRule.ActionHostName}",
                            "changeStep": "[Optional] In auto ramp up scenario this is the step to to add/remove from {Microsoft.Web.Hosting.Administration.RampUpRule.ReroutePercentage} until it reaches \r\n            {Microsoft.Web.Hosting.Administration.RampUpRule.MinReroutePercentage} or {Microsoft.Web.Hosting.Administration.RampUpRule.MaxReroutePercentage}. Site metrics are checked every N minutes specificed in {Microsoft.Web.Hosting.Administration.RampUpRule.ChangeIntervalInMinutes}.\r\n            Custom decision algorithm can be provided in TiPCallback site extension which Url can be specified in {Microsoft.Web.Hosting.Administration.RampUpRule.ChangeDecisionCallbackUrl}",
                            "changeIntervalInMinutes": "[Optional] Specifies interval in mimuntes to reevaluate ReroutePercentage",
                            "minReroutePercentage": "[Optional] Specifies lower boundary above which ReroutePercentage will stay.",
                            "maxReroutePercentage": "[Optional] Specifies upper boundary below which ReroutePercentage will stay.",
                            "changeDecisionCallbackUrl": "Custom decision algorithm can be provided in TiPCallback site extension which Url can be specified. See TiPCallback site extension for the scaffold and contracts.\r\n            https://www.siteextensions.net/packages/TiPCallback/",
                            "name": "Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment."
                        }
                    ]
                },
                "limits": {
                    "maxPercentageCpu": "Maximum allowed CPU usage percentage",
                    "maxMemoryInMb": "Maximum allowed memory usage in MB",
                    "maxDiskSizeInMb": "Maximum allowed disk size usage in MB"
                },
                "autoHealEnabled": "Auto heal enabled",
                "autoHealRules": {
                    "triggers": {
                        "requests": {
                            "count": "Count",
                            "timeInterval": "TimeInterval"
                        },
                        "privateBytesInKB": "PrivateBytesInKB - Defines a rule based on private bytes",
                        "statusCodes": [
                            {
                                "status": "HTTP status code",
                                "subStatus": "SubStatus",
                                "win32Status": "Win32 error code",
                                "count": "Count",
                                "timeInterval": "TimeInterval"
                            }
                        ],
                        "slowRequests": {
                            "timeTaken": "TimeTaken",
                            "count": "Count",
                            "timeInterval": "TimeInterval"
                        }
                    },
                    "actions": {
                        "actionType": "ActionType - predefined action to be taken",
                        "customAction": {
                            "exe": "Executable to be run",
                            "parameters": "Parameters for the executable"
                        }
                    }
                },
                "tracingOptions": "Tracing options",
                "vnetName": "Vnet name",
                "siteAuthEnabled": "App Service Authentication / Authorization enabled",
                "siteAuthSettings": {
                    "clientId": "Gets or sets the unique ID of this relying party application, known as the client_id.",
                    "issuer": "Gets or sets the OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.\r\n            When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://sts.windows.net/{tenant-guid}/.\r\n            This URI is a case-sensitive identifier for the token issuer."
                },
                "autoSwapSlotName": "Auto swap slot name"
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "numberOfWorkers": "(integer)",
                "defaultDocuments": [
                    "(string)"
                ],
                "netFrameworkVersion": "(string)",
                "phpVersion": "(string)",
                "pythonVersion": "(string)",
                "requestTracingEnabled": "(boolean)",
                "requestTracingExpirationTime": "(string)",
                "remoteDebuggingEnabled": "(boolean)",
                "remoteDebuggingVersion": "(string)",
                "httpLoggingEnabled": "(boolean)",
                "logsDirectorySizeLimit": "(integer)",
                "detailedErrorLoggingEnabled": "(boolean)",
                "publishingUsername": "(string)",
                "publishingPassword": "(string)",
                "appSettings": [
                    {
                        "name": "(string)",
                        "value": "(string)"
                    }
                ],
                "metadata": [
                    {
                        "name": "(string)",
                        "value": "(string)"
                    }
                ],
                "connectionStrings": [
                    {
                        "name": "(string)",
                        "connectionString": "(string)",
                        "type": "(string)"
                    }
                ],
                "handlerMappings": [
                    {
                        "extension": "(string)",
                        "scriptProcessor": "(string)",
                        "arguments": "(string)"
                    }
                ],
                "documentRoot": "(string)",
                "scmType": "(string)",
                "use32BitWorkerProcess": "(boolean)",
                "webSocketsEnabled": "(boolean)",
                "alwaysOn": "(boolean)",
                "javaVersion": "(string)",
                "javaContainer": "(string)",
                "javaContainerVersion": "(string)",
                "managedPipelineMode": "(string)",
                "virtualApplications": [
                    {
                        "virtualPath": "(string)",
                        "physicalPath": "(string)",
                        "preloadEnabled": "(boolean)",
                        "virtualDirectories": [
                            {
                                "virtualPath": "(string)",
                                "physicalPath": "(string)"
                            }
                        ]
                    }
                ],
                "loadBalancing": "(string)",
                "experiments": {
                    "rampUpRules": [
                        {
                            "actionHostName": "(string)",
                            "reroutePercentage": "(number)",
                            "changeStep": "(number)",
                            "changeIntervalInMinutes": "(integer)",
                            "minReroutePercentage": "(number)",
                            "maxReroutePercentage": "(number)",
                            "changeDecisionCallbackUrl": "(string)",
                            "name": "(string)"
                        }
                    ]
                },
                "limits": {
                    "maxPercentageCpu": "(number)",
                    "maxMemoryInMb": "(integer)",
                    "maxDiskSizeInMb": "(integer)"
                },
                "autoHealEnabled": "(boolean)",
                "autoHealRules": {
                    "triggers": {
                        "requests": {
                            "count": "(integer)",
                            "timeInterval": "(string)"
                        },
                        "privateBytesInKB": "(integer)",
                        "statusCodes": [
                            {
                                "status": "(integer)",
                                "subStatus": "(integer)",
                                "win32Status": "(integer)",
                                "count": "(integer)",
                                "timeInterval": "(string)"
                            }
                        ],
                        "slowRequests": {
                            "timeTaken": "(string)",
                            "count": "(integer)",
                            "timeInterval": "(string)"
                        }
                    },
                    "actions": {
                        "actionType": "(string)",
                        "customAction": {
                            "exe": "(string)",
                            "parameters": "(string)"
                        }
                    }
                },
                "tracingOptions": "(string)",
                "vnetName": "(string)",
                "siteAuthEnabled": "(boolean)",
                "siteAuthSettings": {
                    "clientId": "(string)",
                    "issuer": "(string)",
                    "aadClientId": "(string)",
                    "openIdIssuer": "(string)"
                },
                "autoSwapSlotName": "(string)"
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "numberOfWorkers": "Number of workers",
                "defaultDocuments": [
                    null
                ],
                "netFrameworkVersion": "Net Framework Version",
                "phpVersion": "Version of PHP",
                "pythonVersion": "Version of Python",
                "requestTracingEnabled": "Enable request tracing",
                "requestTracingExpirationTime": "Request tracing expiration time",
                "remoteDebuggingEnabled": "Remote Debugging Enabled",
                "remoteDebuggingVersion": "Remote Debugging Version",
                "httpLoggingEnabled": "HTTP logging Enabled",
                "logsDirectorySizeLimit": "HTTP Logs Directory size limit",
                "detailedErrorLoggingEnabled": "Detailed error logging enabled",
                "publishingUsername": "Publishing user name",
                "publishingPassword": "Publishing password",
                "appSettings": [
                    {
                        "name": "Pair name",
                        "value": "Pair value"
                    }
                ],
                "metadata": [
                    {
                        "name": "Pair name",
                        "value": "Pair value"
                    }
                ],
                "connectionStrings": [
                    {
                        "name": "Name of connection string",
                        "connectionString": "Connection string value",
                        "type": "Type of database"
                    }
                ],
                "handlerMappings": [
                    {
                        "extension": "Requests with this extension will be handled using the specified FastCGI application.",
                        "scriptProcessor": "The absolute path to the FastCGI application.",
                        "arguments": "Command-line arguments to be passed to the script processor."
                    }
                ],
                "documentRoot": "Document root",
                "scmType": "SCM type",
                "use32BitWorkerProcess": "Use 32 bit worker process",
                "webSocketsEnabled": "Web socket enabled.",
                "alwaysOn": "Always On",
                "javaVersion": "Java version",
                "javaContainer": "Java container",
                "javaContainerVersion": "Java container version",
                "managedPipelineMode": "Managed pipeline mode",
                "virtualApplications": [
                    {
                        "virtualDirectories": [
                            {}
                        ]
                    }
                ],
                "loadBalancing": "Site load balancing",
                "experiments": {
                    "rampUpRules": [
                        {
                            "actionHostName": "Hostname of a slot to which the traffic will be redirected if decided to. E.g. mysite-stage.azurewebsites.net",
                            "reroutePercentage": "Percentage of the traffic which will be redirected to {Microsoft.Web.Hosting.Administration.RampUpRule.ActionHostName}",
                            "changeStep": "[Optional] In auto ramp up scenario this is the step to to add/remove from {Microsoft.Web.Hosting.Administration.RampUpRule.ReroutePercentage} until it reaches \r\n            {Microsoft.Web.Hosting.Administration.RampUpRule.MinReroutePercentage} or {Microsoft.Web.Hosting.Administration.RampUpRule.MaxReroutePercentage}. Site metrics are checked every N minutes specificed in {Microsoft.Web.Hosting.Administration.RampUpRule.ChangeIntervalInMinutes}.\r\n            Custom decision algorithm can be provided in TiPCallback site extension which Url can be specified in {Microsoft.Web.Hosting.Administration.RampUpRule.ChangeDecisionCallbackUrl}",
                            "changeIntervalInMinutes": "[Optional] Specifies interval in mimuntes to reevaluate ReroutePercentage",
                            "minReroutePercentage": "[Optional] Specifies lower boundary above which ReroutePercentage will stay.",
                            "maxReroutePercentage": "[Optional] Specifies upper boundary below which ReroutePercentage will stay.",
                            "changeDecisionCallbackUrl": "Custom decision algorithm can be provided in TiPCallback site extension which Url can be specified. See TiPCallback site extension for the scaffold and contracts.\r\n            https://www.siteextensions.net/packages/TiPCallback/",
                            "name": "Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment."
                        }
                    ]
                },
                "limits": {
                    "maxPercentageCpu": "Maximum allowed CPU usage percentage",
                    "maxMemoryInMb": "Maximum allowed memory usage in MB",
                    "maxDiskSizeInMb": "Maximum allowed disk size usage in MB"
                },
                "autoHealEnabled": "Auto heal enabled",
                "autoHealRules": {
                    "triggers": {
                        "requests": {
                            "count": "Count",
                            "timeInterval": "TimeInterval"
                        },
                        "privateBytesInKB": "PrivateBytesInKB - Defines a rule based on private bytes",
                        "statusCodes": [
                            {
                                "status": "HTTP status code",
                                "subStatus": "SubStatus",
                                "win32Status": "Win32 error code",
                                "count": "Count",
                                "timeInterval": "TimeInterval"
                            }
                        ],
                        "slowRequests": {
                            "timeTaken": "TimeTaken",
                            "count": "Count",
                            "timeInterval": "TimeInterval"
                        }
                    },
                    "actions": {
                        "actionType": "ActionType - predefined action to be taken",
                        "customAction": {
                            "exe": "Executable to be run",
                            "parameters": "Parameters for the executable"
                        }
                    }
                },
                "tracingOptions": "Tracing options",
                "vnetName": "Vnet name",
                "siteAuthEnabled": "App Service Authentication / Authorization enabled",
                "siteAuthSettings": {
                    "clientId": "Gets or sets the unique ID of this relying party application, known as the client_id.",
                    "issuer": "Gets or sets the OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.\r\n            When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://sts.windows.net/{tenant-guid}/.\r\n            This URI is a case-sensitive identifier for the token issuer."
                },
                "autoSwapSlotName": "Auto swap slot name"
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "numberOfWorkers": "(integer)",
                "defaultDocuments": [
                    "(string)"
                ],
                "netFrameworkVersion": "(string)",
                "phpVersion": "(string)",
                "pythonVersion": "(string)",
                "requestTracingEnabled": "(boolean)",
                "requestTracingExpirationTime": "(string)",
                "remoteDebuggingEnabled": "(boolean)",
                "remoteDebuggingVersion": "(string)",
                "httpLoggingEnabled": "(boolean)",
                "logsDirectorySizeLimit": "(integer)",
                "detailedErrorLoggingEnabled": "(boolean)",
                "publishingUsername": "(string)",
                "publishingPassword": "(string)",
                "appSettings": [
                    {
                        "name": "(string)",
                        "value": "(string)"
                    }
                ],
                "metadata": [
                    {
                        "name": "(string)",
                        "value": "(string)"
                    }
                ],
                "connectionStrings": [
                    {
                        "name": "(string)",
                        "connectionString": "(string)",
                        "type": "(string)"
                    }
                ],
                "handlerMappings": [
                    {
                        "extension": "(string)",
                        "scriptProcessor": "(string)",
                        "arguments": "(string)"
                    }
                ],
                "documentRoot": "(string)",
                "scmType": "(string)",
                "use32BitWorkerProcess": "(boolean)",
                "webSocketsEnabled": "(boolean)",
                "alwaysOn": "(boolean)",
                "javaVersion": "(string)",
                "javaContainer": "(string)",
                "javaContainerVersion": "(string)",
                "managedPipelineMode": "(string)",
                "virtualApplications": [
                    {
                        "virtualPath": "(string)",
                        "physicalPath": "(string)",
                        "preloadEnabled": "(boolean)",
                        "virtualDirectories": [
                            {
                                "virtualPath": "(string)",
                                "physicalPath": "(string)"
                            }
                        ]
                    }
                ],
                "loadBalancing": "(string)",
                "experiments": {
                    "rampUpRules": [
                        {
                            "actionHostName": "(string)",
                            "reroutePercentage": "(number)",
                            "changeStep": "(number)",
                            "changeIntervalInMinutes": "(integer)",
                            "minReroutePercentage": "(number)",
                            "maxReroutePercentage": "(number)",
                            "changeDecisionCallbackUrl": "(string)",
                            "name": "(string)"
                        }
                    ]
                },
                "limits": {
                    "maxPercentageCpu": "(number)",
                    "maxMemoryInMb": "(integer)",
                    "maxDiskSizeInMb": "(integer)"
                },
                "autoHealEnabled": "(boolean)",
                "autoHealRules": {
                    "triggers": {
                        "requests": {
                            "count": "(integer)",
                            "timeInterval": "(string)"
                        },
                        "privateBytesInKB": "(integer)",
                        "statusCodes": [
                            {
                                "status": "(integer)",
                                "subStatus": "(integer)",
                                "win32Status": "(integer)",
                                "count": "(integer)",
                                "timeInterval": "(string)"
                            }
                        ],
                        "slowRequests": {
                            "timeTaken": "(string)",
                            "count": "(integer)",
                            "timeInterval": "(string)"
                        }
                    },
                    "actions": {
                        "actionType": "(string)",
                        "customAction": {
                            "exe": "(string)",
                            "parameters": "(string)"
                        }
                    }
                },
                "tracingOptions": "(string)",
                "vnetName": "(string)",
                "siteAuthEnabled": "(boolean)",
                "siteAuthSettings": {
                    "clientId": "(string)",
                    "issuer": "(string)",
                    "aadClientId": "(string)",
                    "openIdIssuer": "(string)"
                },
                "autoSwapSlotName": "(string)"
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "numberOfWorkers": "Number of workers",
                "defaultDocuments": [
                    null
                ],
                "netFrameworkVersion": "Net Framework Version",
                "phpVersion": "Version of PHP",
                "pythonVersion": "Version of Python",
                "requestTracingEnabled": "Enable request tracing",
                "requestTracingExpirationTime": "Request tracing expiration time",
                "remoteDebuggingEnabled": "Remote Debugging Enabled",
                "remoteDebuggingVersion": "Remote Debugging Version",
                "httpLoggingEnabled": "HTTP logging Enabled",
                "logsDirectorySizeLimit": "HTTP Logs Directory size limit",
                "detailedErrorLoggingEnabled": "Detailed error logging enabled",
                "publishingUsername": "Publishing user name",
                "publishingPassword": "Publishing password",
                "appSettings": [
                    {
                        "name": "Pair name",
                        "value": "Pair value"
                    }
                ],
                "metadata": [
                    {
                        "name": "Pair name",
                        "value": "Pair value"
                    }
                ],
                "connectionStrings": [
                    {
                        "name": "Name of connection string",
                        "connectionString": "Connection string value",
                        "type": "Type of database"
                    }
                ],
                "handlerMappings": [
                    {
                        "extension": "Requests with this extension will be handled using the specified FastCGI application.",
                        "scriptProcessor": "The absolute path to the FastCGI application.",
                        "arguments": "Command-line arguments to be passed to the script processor."
                    }
                ],
                "documentRoot": "Document root",
                "scmType": "SCM type",
                "use32BitWorkerProcess": "Use 32 bit worker process",
                "webSocketsEnabled": "Web socket enabled.",
                "alwaysOn": "Always On",
                "javaVersion": "Java version",
                "javaContainer": "Java container",
                "javaContainerVersion": "Java container version",
                "managedPipelineMode": "Managed pipeline mode",
                "virtualApplications": [
                    {
                        "virtualDirectories": [
                            {}
                        ]
                    }
                ],
                "loadBalancing": "Site load balancing",
                "experiments": {
                    "rampUpRules": [
                        {
                            "actionHostName": "Hostname of a slot to which the traffic will be redirected if decided to. E.g. mysite-stage.azurewebsites.net",
                            "reroutePercentage": "Percentage of the traffic which will be redirected to {Microsoft.Web.Hosting.Administration.RampUpRule.ActionHostName}",
                            "changeStep": "[Optional] In auto ramp up scenario this is the step to to add/remove from {Microsoft.Web.Hosting.Administration.RampUpRule.ReroutePercentage} until it reaches \r\n            {Microsoft.Web.Hosting.Administration.RampUpRule.MinReroutePercentage} or {Microsoft.Web.Hosting.Administration.RampUpRule.MaxReroutePercentage}. Site metrics are checked every N minutes specificed in {Microsoft.Web.Hosting.Administration.RampUpRule.ChangeIntervalInMinutes}.\r\n            Custom decision algorithm can be provided in TiPCallback site extension which Url can be specified in {Microsoft.Web.Hosting.Administration.RampUpRule.ChangeDecisionCallbackUrl}",
                            "changeIntervalInMinutes": "[Optional] Specifies interval in mimuntes to reevaluate ReroutePercentage",
                            "minReroutePercentage": "[Optional] Specifies lower boundary above which ReroutePercentage will stay.",
                            "maxReroutePercentage": "[Optional] Specifies upper boundary below which ReroutePercentage will stay.",
                            "changeDecisionCallbackUrl": "Custom decision algorithm can be provided in TiPCallback site extension which Url can be specified. See TiPCallback site extension for the scaffold and contracts.\r\n            https://www.siteextensions.net/packages/TiPCallback/",
                            "name": "Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment."
                        }
                    ]
                },
                "limits": {
                    "maxPercentageCpu": "Maximum allowed CPU usage percentage",
                    "maxMemoryInMb": "Maximum allowed memory usage in MB",
                    "maxDiskSizeInMb": "Maximum allowed disk size usage in MB"
                },
                "autoHealEnabled": "Auto heal enabled",
                "autoHealRules": {
                    "triggers": {
                        "requests": {
                            "count": "Count",
                            "timeInterval": "TimeInterval"
                        },
                        "privateBytesInKB": "PrivateBytesInKB - Defines a rule based on private bytes",
                        "statusCodes": [
                            {
                                "status": "HTTP status code",
                                "subStatus": "SubStatus",
                                "win32Status": "Win32 error code",
                                "count": "Count",
                                "timeInterval": "TimeInterval"
                            }
                        ],
                        "slowRequests": {
                            "timeTaken": "TimeTaken",
                            "count": "Count",
                            "timeInterval": "TimeInterval"
                        }
                    },
                    "actions": {
                        "actionType": "ActionType - predefined action to be taken",
                        "customAction": {
                            "exe": "Executable to be run",
                            "parameters": "Parameters for the executable"
                        }
                    }
                },
                "tracingOptions": "Tracing options",
                "vnetName": "Vnet name",
                "siteAuthEnabled": "App Service Authentication / Authorization enabled",
                "siteAuthSettings": {
                    "clientId": "Gets or sets the unique ID of this relying party application, known as the client_id.",
                    "issuer": "Gets or sets the OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.\r\n            When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://sts.windows.net/{tenant-guid}/.\r\n            This URI is a case-sensitive identifier for the token issuer."
                },
                "autoSwapSlotName": "Auto swap slot name"
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "repoUrl": "(string)",
                "branch": "(string)",
                "isManualIntegration": "(boolean)",
                "deploymentRollbackEnabled": "(boolean)",
                "isMercurial": "(boolean)"
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "repoUrl": "Repository or source control url",
                "branch": "Name of branch to use for deployment",
                "isManualIntegration": "Whether to manual or continuous integration",
                "deploymentRollbackEnabled": "Whether to manual or continuous integration",
                "isMercurial": "Mercurial or Git repository type"
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "repoUrl": "(string)",
                "branch": "(string)",
                "isManualIntegration": "(boolean)",
                "deploymentRollbackEnabled": "(boolean)",
                "isMercurial": "(boolean)"
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "repoUrl": "Repository or source control url",
                "branch": "Name of branch to use for deployment",
                "isManualIntegration": "Whether to manual or continuous integration",
                "deploymentRollbackEnabled": "Whether to manual or continuous integration",
                "isMercurial": "Mercurial or Git repository type"
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "repoUrl": "(string)",
                "branch": "(string)",
                "isManualIntegration": "(boolean)",
                "deploymentRollbackEnabled": "(boolean)",
                "isMercurial": "(boolean)"
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "repoUrl": "Repository or source control url",
                "branch": "Name of branch to use for deployment",
                "isManualIntegration": "Whether to manual or continuous integration",
                "deploymentRollbackEnabled": "Whether to manual or continuous integration",
                "isMercurial": "Mercurial or Git repository type"
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "repoUrl": "(string)",
                "branch": "(string)",
                "isManualIntegration": "(boolean)",
                "deploymentRollbackEnabled": "(boolean)",
                "isMercurial": "(boolean)"
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "repoUrl": "Repository or source control url",
                "branch": "Name of branch to use for deployment",
                "isManualIntegration": "Whether to manual or continuous integration",
                "deploymentRollbackEnabled": "Whether to manual or continuous integration",
                "isMercurial": "Mercurial or Git repository type"
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings/list",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings/list",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {}
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {}
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {}
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {}
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings/list",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings/list",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {}
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {}
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {}
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {}
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/publishingcredentials/list",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/publishingcredentials/list",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata/list",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata/list",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {}
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {}
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {}
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {}
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {}
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {}
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {}
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {}
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/metricdefinitions",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/metricdefinitions",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publishxml",
        "RequestBody": {
            "format": "(string)"
        },
        "RequestBodyDoc": {
            "format": "Name of the format. Valid values are: \r\n            FileZilla3\r\n            WebDeploy -- default\r\n            Ftp"
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publishxml",
        "RequestBody": {
            "format": "(string)"
        },
        "RequestBodyDoc": {
            "format": "Name of the format. Valid values are: \r\n            FileZilla3\r\n            WebDeploy -- default\r\n            Ftp"
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restart",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restart",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/start",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/start",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stop",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/stop",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sync",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sync",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/newpassword",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/newpassword",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "entityName": "(string)",
                "entityConnectionString": "(string)",
                "resourceType": "(string)",
                "resourceConnectionString": "(string)",
                "hostname": "(string)",
                "port": "(integer)",
                "biztalkUri": "(string)"
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {}
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "entityName": "(string)",
                "entityConnectionString": "(string)",
                "resourceType": "(string)",
                "resourceConnectionString": "(string)",
                "hostname": "(string)",
                "port": "(integer)",
                "biztalkUri": "(string)"
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {}
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "entityName": "(string)",
                "entityConnectionString": "(string)",
                "resourceType": "(string)",
                "resourceConnectionString": "(string)",
                "hostname": "(string)",
                "port": "(integer)",
                "biztalkUri": "(string)"
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {}
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "entityName": "(string)",
                "entityConnectionString": "(string)",
                "resourceType": "(string)",
                "resourceConnectionString": "(string)",
                "hostname": "(string)",
                "port": "(integer)",
                "biztalkUri": "(string)"
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {}
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "vnetName": "(string)",
                "vpnPackageUri": "(string)"
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "vnetName": "The VNET name.",
                "vpnPackageUri": "The URI where the Vpn package can be downloaded"
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "vnetName": "(string)",
                "vpnPackageUri": "(string)"
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "vnetName": "The VNET name.",
                "vpnPackageUri": "The URI where the Vpn package can be downloaded"
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "vnetName": "(string)",
                "vpnPackageUri": "(string)"
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "vnetName": "The VNET name.",
                "vpnPackageUri": "The URI where the Vpn package can be downloaded"
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "vnetName": "(string)",
                "vpnPackageUri": "(string)"
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "vnetName": "The VNET name.",
                "vpnPackageUri": "The URI where the Vpn package can be downloaded"
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "vnetResourceId": "(string)",
                "certThumbprint": "(string)",
                "certBlob": "(string)"
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "vnetResourceId": "The vnet resource id",
                "certThumbprint": "The client certificate thumbprint",
                "certBlob": "A certificate file (.cer) blob containing the public key of the private key used to authenticate a \r\n            Point-To-Site VPN connection."
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "vnetResourceId": "(string)",
                "certThumbprint": "(string)",
                "certBlob": "(string)"
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "vnetResourceId": "The vnet resource id",
                "certThumbprint": "The client certificate thumbprint",
                "certBlob": "A certificate file (.cer) blob containing the public key of the private key used to authenticate a \r\n            Point-To-Site VPN connection."
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "vnetResourceId": "(string)",
                "certThumbprint": "(string)",
                "certBlob": "(string)"
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "vnetResourceId": "The vnet resource id",
                "certThumbprint": "The client certificate thumbprint",
                "certBlob": "A certificate file (.cer) blob containing the public key of the private key used to authenticate a \r\n            Point-To-Site VPN connection."
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "vnetResourceId": "(string)",
                "certThumbprint": "(string)",
                "certBlob": "(string)"
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "vnetResourceId": "The vnet resource id",
                "certThumbprint": "The client certificate thumbprint",
                "certBlob": "A certificate file (.cer) blob containing the public key of the private key used to authenticate a \r\n            Point-To-Site VPN connection."
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsswap",
        "RequestBody": {
            "targetSlot": "(string)",
            "preserveVnet": "(boolean)"
        },
        "RequestBodyDoc": {
            "targetSlot": "Set the destination deployment slot during swap operation",
            "preserveVnet": "Get or set the flag indicating it should preserve VNet to the slot during swap"
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsswap",
        "RequestBody": {
            "targetSlot": "(string)",
            "preserveVnet": "(boolean)"
        },
        "RequestBodyDoc": {
            "targetSlot": "Set the destination deployment slot during swap operation",
            "preserveVnet": "Get or set the flag indicating it should preserve VNet to the slot during swap"
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsdiffs",
        "RequestBody": {
            "targetSlot": "(string)",
            "preserveVnet": "(boolean)"
        },
        "RequestBodyDoc": {
            "targetSlot": "Set the destination deployment slot during swap operation",
            "preserveVnet": "Get or set the flag indicating it should preserve VNet to the slot during swap"
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsdiffs",
        "RequestBody": {
            "targetSlot": "(string)",
            "preserveVnet": "(boolean)"
        },
        "RequestBodyDoc": {
            "targetSlot": "Set the destination deployment slot during swap operation",
            "preserveVnet": "Get or set the flag indicating it should preserve VNet to the slot during swap"
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/applySlotConfig",
        "RequestBody": {
            "targetSlot": "(string)",
            "preserveVnet": "(boolean)"
        },
        "RequestBodyDoc": {
            "targetSlot": "Set the destination deployment slot during swap operation",
            "preserveVnet": "Get or set the flag indicating it should preserve VNet to the slot during swap"
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/applySlotConfig",
        "RequestBody": {
            "targetSlot": "(string)",
            "preserveVnet": "(boolean)"
        },
        "RequestBodyDoc": {
            "targetSlot": "Set the destination deployment slot during swap operation",
            "preserveVnet": "Get or set the flag indicating it should preserve VNet to the slot during swap"
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/resetSlotConfig",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/resetSlotConfig",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web.Admin/systems/{webSystemName}/usage",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web.Admin/systems",
        "ResponseBody": [
            {
                "id": "(string)",
                "name": "(string)",
                "type": "(string)",
                "kind": "(string)",
                "location": "(string)",
                "tags": {},
                "plan": {
                    "name": "(string)",
                    "publisher": "(string)",
                    "product": "(string)",
                    "promotionCode": "(string)"
                },
                "properties": {
                    "name": "(string)",
                    "username": "(string)",
                    "password": "(string)",
                    "fileShare": "(string)",
                    "publishingDns": "(string)",
                    "ftpDns": "(string)",
                    "parkingPage": "(string)",
                    "parkingPageContent": "(string)",
                    "storageDomain": "(string)",
                    "connectionStrings": [
                        {
                            "name": "(string)",
                            "value": "(string)"
                        }
                    ],
                    "dnsSuffix": "(string)",
                    "controlPanelUrl": "(string)",
                    "location": "(string)",
                    "webSystemSummary": {
                        "numberOfWebWorkers": "(integer)",
                        "numberOfPublishers": "(integer)",
                        "numberOfLoadBalancers": "(integer)",
                        "numberOfControllers": "(integer)",
                        "numberOfActiveWebsites": "(integer)"
                    },
                    "configurationSettings": {
                        "publishingAuditLogEnabled": "(boolean)",
                        "defaultWebSiteCertificate": {
                            "friendlyName": "(string)",
                            "subjectName": "(string)",
                            "hostNames": [
                                "(string)"
                            ],
                            "pfxBlob": "(string)",
                            "siteName": "(string)",
                            "selfLink": "(string)",
                            "issuer": "(string)",
                            "issueDate": "(string)",
                            "expirationDate": "(string)",
                            "password": "(string)",
                            "thumbprint": "(string)",
                            "valid": "(boolean)",
                            "cerBlob": "(string)",
                            "publicKeyHash": "(string)",
                            "hostingEnvironment": "(string)"
                        },
                        "publisherCertificate": {
                            "friendlyName": "(string)",
                            "subjectName": "(string)",
                            "hostNames": [
                                "(string)"
                            ],
                            "pfxBlob": "(string)",
                            "siteName": "(string)",
                            "selfLink": "(string)",
                            "issuer": "(string)",
                            "issueDate": "(string)",
                            "expirationDate": "(string)",
                            "password": "(string)",
                            "thumbprint": "(string)",
                            "valid": "(boolean)",
                            "cerBlob": "(string)",
                            "publicKeyHash": "(string)",
                            "hostingEnvironment": "(string)"
                        },
                        "loadBalancerCredential": {
                            "userName": "(string)",
                            "password": "(string)"
                        },
                        "webWorkerCredential": {
                            "userName": "(string)",
                            "password": "(string)"
                        },
                        "publisherCredential": {
                            "userName": "(string)",
                            "password": "(string)"
                        },
                        "fileServerAdminCredential": {
                            "userName": "(string)",
                            "password": "(string)"
                        },
                        "managementServerAdminCredential": {
                            "userName": "(string)",
                            "password": "(string)"
                        },
                        "rejectPrivateAddresses": "(boolean)",
                        "privateAddressRange": [
                            "(string)"
                        ],
                        "privateAddressRangeV6": [
                            "(string)"
                        ],
                        "ipSslFrontEndVipAddressRange": [
                            "(string)"
                        ],
                        "ipSslFrontEndVipAddressRangeV6": [
                            "(string)"
                        ],
                        "winAuthAdminState": "(integer)",
                        "customAppPoolIdentityAdminState": "(boolean)"
                    }
                }
            }
        ],
        "ResponseBodyDoc": [
            {
                "id": "Resource Id. Typically id is populated only for responses to GET requests. Caller is responsible for passing in this\r\n            value for GET requests only.\r\n            For example: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupId}/providers/Microsoft.Web/sites/{sitename}",
                "name": "Name of resource",
                "type": "Type of resource e.g Microsoft.Web/sites",
                "kind": "Kind of app e.g web app, api app, mobile app",
                "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
                "tags": {},
                "plan": {
                    "name": "The name",
                    "publisher": "The publisher",
                    "product": "The product",
                    "promotionCode": "The promotion code"
                },
                "properties": {
                    "name": "Name for the web system",
                    "username": "Administrator account",
                    "password": "PAssword for the administrator account",
                    "fileShare": "File share for content storage",
                    "publishingDns": "Publishing DNS",
                    "ftpDns": "Ftp DNS",
                    "parkingPage": "Parking page name",
                    "parkingPageContent": "Parking page content",
                    "storageDomain": "Storage domain",
                    "connectionStrings": [
                        {
                            "name": "Name for the database",
                            "value": "Connection string"
                        }
                    ],
                    "dnsSuffix": "Dns suffix",
                    "controlPanelUrl": "Link to a page that displays the Control Panel for the Web System.",
                    "location": "Location for the Web System, used for OnPrem CSM.",
                    "webSystemSummary": {
                        "numberOfWebWorkers": "Number of web workers",
                        "numberOfPublishers": "Number of publishers",
                        "numberOfLoadBalancers": "Number of load balancers",
                        "numberOfControllers": "Number of controllers",
                        "numberOfActiveWebsites": "Number of active websites"
                    },
                    "configurationSettings": {
                        "publishingAuditLogEnabled": "Enables or disables Publishing Audit log",
                        "defaultWebSiteCertificate": {
                            "friendlyName": "Friendly name of the certificate",
                            "subjectName": "Subject name of the certificate",
                            "hostNames": [
                                null
                            ],
                            "pfxBlob": "Pfx blob",
                            "siteName": "App name",
                            "selfLink": "Self link",
                            "issuer": "Certificate issuer",
                            "issueDate": "Certificate issue Date",
                            "expirationDate": "Certificate expriration date",
                            "password": "Certificate password",
                            "thumbprint": "Certificate thumbprint",
                            "valid": "Is the certificate valid?",
                            "cerBlob": "Raw bytes of .cer file",
                            "publicKeyHash": "Public key hash",
                            "hostingEnvironment": "The hosting environment the certificate exists on"
                        },
                        "publisherCertificate": {
                            "friendlyName": "Friendly name of the certificate",
                            "subjectName": "Subject name of the certificate",
                            "hostNames": [
                                null
                            ],
                            "pfxBlob": "Pfx blob",
                            "siteName": "App name",
                            "selfLink": "Self link",
                            "issuer": "Certificate issuer",
                            "issueDate": "Certificate issue Date",
                            "expirationDate": "Certificate expriration date",
                            "password": "Certificate password",
                            "thumbprint": "Certificate thumbprint",
                            "valid": "Is the certificate valid?",
                            "cerBlob": "Raw bytes of .cer file",
                            "publicKeyHash": "Public key hash",
                            "hostingEnvironment": "The hosting environment the certificate exists on"
                        },
                        "loadBalancerCredential": {
                            "userName": "user name associated with the credentials.",
                            "password": "Password for the user name associated with the credentials."
                        },
                        "webWorkerCredential": {
                            "userName": "user name associated with the credentials.",
                            "password": "Password for the user name associated with the credentials."
                        },
                        "publisherCredential": {
                            "userName": "user name associated with the credentials.",
                            "password": "Password for the user name associated with the credentials."
                        },
                        "fileServerAdminCredential": {
                            "userName": "user name associated with the credentials.",
                            "password": "Password for the user name associated with the credentials."
                        },
                        "managementServerAdminCredential": {
                            "userName": "user name associated with the credentials.",
                            "password": "Password for the user name associated with the credentials."
                        },
                        "rejectPrivateAddresses": "Defines if website's outbound calls to private IP addresses should be rejected",
                        "privateAddressRange": [
                            null
                        ],
                        "privateAddressRangeV6": [
                            null
                        ],
                        "ipSslFrontEndVipAddressRange": [
                            null
                        ],
                        "ipSslFrontEndVipAddressRangeV6": [
                            null
                        ],
                        "winAuthAdminState": "Sets Windows Authentication globally for WebSystem. 0 - disallowed, 1 - allowed, 2 - required.",
                        "customAppPoolIdentityAdminState": "Enables or disables use of Custom credentials for website's application pool"
                    }
                }
            }
        ],
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web.Admin/systems/{name}",
        "ResponseBody": {
            "id": "(string)",
            "name": "(string)",
            "type": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "name": "(string)",
                "username": "(string)",
                "password": "(string)",
                "fileShare": "(string)",
                "publishingDns": "(string)",
                "ftpDns": "(string)",
                "parkingPage": "(string)",
                "parkingPageContent": "(string)",
                "storageDomain": "(string)",
                "connectionStrings": [
                    {
                        "name": "(string)",
                        "value": "(string)"
                    }
                ],
                "dnsSuffix": "(string)",
                "controlPanelUrl": "(string)",
                "location": "(string)",
                "webSystemSummary": {
                    "numberOfWebWorkers": "(integer)",
                    "numberOfPublishers": "(integer)",
                    "numberOfLoadBalancers": "(integer)",
                    "numberOfControllers": "(integer)",
                    "numberOfActiveWebsites": "(integer)"
                },
                "configurationSettings": {
                    "publishingAuditLogEnabled": "(boolean)",
                    "defaultWebSiteCertificate": {
                        "friendlyName": "(string)",
                        "subjectName": "(string)",
                        "hostNames": [
                            "(string)"
                        ],
                        "pfxBlob": "(string)",
                        "siteName": "(string)",
                        "selfLink": "(string)",
                        "issuer": "(string)",
                        "issueDate": "(string)",
                        "expirationDate": "(string)",
                        "password": "(string)",
                        "thumbprint": "(string)",
                        "valid": "(boolean)",
                        "cerBlob": "(string)",
                        "publicKeyHash": "(string)",
                        "hostingEnvironment": "(string)"
                    },
                    "publisherCertificate": {
                        "friendlyName": "(string)",
                        "subjectName": "(string)",
                        "hostNames": [
                            "(string)"
                        ],
                        "pfxBlob": "(string)",
                        "siteName": "(string)",
                        "selfLink": "(string)",
                        "issuer": "(string)",
                        "issueDate": "(string)",
                        "expirationDate": "(string)",
                        "password": "(string)",
                        "thumbprint": "(string)",
                        "valid": "(boolean)",
                        "cerBlob": "(string)",
                        "publicKeyHash": "(string)",
                        "hostingEnvironment": "(string)"
                    },
                    "loadBalancerCredential": {
                        "userName": "(string)",
                        "password": "(string)"
                    },
                    "webWorkerCredential": {
                        "userName": "(string)",
                        "password": "(string)"
                    },
                    "publisherCredential": {
                        "userName": "(string)",
                        "password": "(string)"
                    },
                    "fileServerAdminCredential": {
                        "userName": "(string)",
                        "password": "(string)"
                    },
                    "managementServerAdminCredential": {
                        "userName": "(string)",
                        "password": "(string)"
                    },
                    "rejectPrivateAddresses": "(boolean)",
                    "privateAddressRange": [
                        "(string)"
                    ],
                    "privateAddressRangeV6": [
                        "(string)"
                    ],
                    "ipSslFrontEndVipAddressRange": [
                        "(string)"
                    ],
                    "ipSslFrontEndVipAddressRangeV6": [
                        "(string)"
                    ],
                    "winAuthAdminState": "(integer)",
                    "customAppPoolIdentityAdminState": "(boolean)"
                }
            }
        },
        "ResponseBodyDoc": {
            "id": "Resource Id. Typically id is populated only for responses to GET requests. Caller is responsible for passing in this\r\n            value for GET requests only.\r\n            For example: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupId}/providers/Microsoft.Web/sites/{sitename}",
            "name": "Name of resource",
            "type": "Type of resource e.g Microsoft.Web/sites",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "name": "Name for the web system",
                "username": "Administrator account",
                "password": "PAssword for the administrator account",
                "fileShare": "File share for content storage",
                "publishingDns": "Publishing DNS",
                "ftpDns": "Ftp DNS",
                "parkingPage": "Parking page name",
                "parkingPageContent": "Parking page content",
                "storageDomain": "Storage domain",
                "connectionStrings": [
                    {
                        "name": "Name for the database",
                        "value": "Connection string"
                    }
                ],
                "dnsSuffix": "Dns suffix",
                "controlPanelUrl": "Link to a page that displays the Control Panel for the Web System.",
                "location": "Location for the Web System, used for OnPrem CSM.",
                "webSystemSummary": {
                    "numberOfWebWorkers": "Number of web workers",
                    "numberOfPublishers": "Number of publishers",
                    "numberOfLoadBalancers": "Number of load balancers",
                    "numberOfControllers": "Number of controllers",
                    "numberOfActiveWebsites": "Number of active websites"
                },
                "configurationSettings": {
                    "publishingAuditLogEnabled": "Enables or disables Publishing Audit log",
                    "defaultWebSiteCertificate": {
                        "friendlyName": "Friendly name of the certificate",
                        "subjectName": "Subject name of the certificate",
                        "hostNames": [
                            null
                        ],
                        "pfxBlob": "Pfx blob",
                        "siteName": "App name",
                        "selfLink": "Self link",
                        "issuer": "Certificate issuer",
                        "issueDate": "Certificate issue Date",
                        "expirationDate": "Certificate expriration date",
                        "password": "Certificate password",
                        "thumbprint": "Certificate thumbprint",
                        "valid": "Is the certificate valid?",
                        "cerBlob": "Raw bytes of .cer file",
                        "publicKeyHash": "Public key hash",
                        "hostingEnvironment": "The hosting environment the certificate exists on"
                    },
                    "publisherCertificate": {
                        "friendlyName": "Friendly name of the certificate",
                        "subjectName": "Subject name of the certificate",
                        "hostNames": [
                            null
                        ],
                        "pfxBlob": "Pfx blob",
                        "siteName": "App name",
                        "selfLink": "Self link",
                        "issuer": "Certificate issuer",
                        "issueDate": "Certificate issue Date",
                        "expirationDate": "Certificate expriration date",
                        "password": "Certificate password",
                        "thumbprint": "Certificate thumbprint",
                        "valid": "Is the certificate valid?",
                        "cerBlob": "Raw bytes of .cer file",
                        "publicKeyHash": "Public key hash",
                        "hostingEnvironment": "The hosting environment the certificate exists on"
                    },
                    "loadBalancerCredential": {
                        "userName": "user name associated with the credentials.",
                        "password": "Password for the user name associated with the credentials."
                    },
                    "webWorkerCredential": {
                        "userName": "user name associated with the credentials.",
                        "password": "Password for the user name associated with the credentials."
                    },
                    "publisherCredential": {
                        "userName": "user name associated with the credentials.",
                        "password": "Password for the user name associated with the credentials."
                    },
                    "fileServerAdminCredential": {
                        "userName": "user name associated with the credentials.",
                        "password": "Password for the user name associated with the credentials."
                    },
                    "managementServerAdminCredential": {
                        "userName": "user name associated with the credentials.",
                        "password": "Password for the user name associated with the credentials."
                    },
                    "rejectPrivateAddresses": "Defines if website's outbound calls to private IP addresses should be rejected",
                    "privateAddressRange": [
                        null
                    ],
                    "privateAddressRangeV6": [
                        null
                    ],
                    "ipSslFrontEndVipAddressRange": [
                        null
                    ],
                    "ipSslFrontEndVipAddressRangeV6": [
                        null
                    ],
                    "winAuthAdminState": "Sets Windows Authentication globally for WebSystem. 0 - disallowed, 1 - allowed, 2 - required.",
                    "customAppPoolIdentityAdminState": "Enables or disables use of Custom credentials for website's application pool"
                }
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web.Admin/systems/{name}",
        "ResponseBody": {
            "id": "(string)",
            "name": "(string)",
            "type": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "name": "(string)",
                "username": "(string)",
                "password": "(string)",
                "fileShare": "(string)",
                "publishingDns": "(string)",
                "ftpDns": "(string)",
                "parkingPage": "(string)",
                "parkingPageContent": "(string)",
                "storageDomain": "(string)",
                "connectionStrings": [
                    {
                        "name": "(string)",
                        "value": "(string)"
                    }
                ],
                "dnsSuffix": "(string)",
                "controlPanelUrl": "(string)",
                "location": "(string)",
                "webSystemSummary": {
                    "numberOfWebWorkers": "(integer)",
                    "numberOfPublishers": "(integer)",
                    "numberOfLoadBalancers": "(integer)",
                    "numberOfControllers": "(integer)",
                    "numberOfActiveWebsites": "(integer)"
                },
                "configurationSettings": {
                    "publishingAuditLogEnabled": "(boolean)",
                    "defaultWebSiteCertificate": {
                        "friendlyName": "(string)",
                        "subjectName": "(string)",
                        "hostNames": [
                            "(string)"
                        ],
                        "pfxBlob": "(string)",
                        "siteName": "(string)",
                        "selfLink": "(string)",
                        "issuer": "(string)",
                        "issueDate": "(string)",
                        "expirationDate": "(string)",
                        "password": "(string)",
                        "thumbprint": "(string)",
                        "valid": "(boolean)",
                        "cerBlob": "(string)",
                        "publicKeyHash": "(string)",
                        "hostingEnvironment": "(string)"
                    },
                    "publisherCertificate": {
                        "friendlyName": "(string)",
                        "subjectName": "(string)",
                        "hostNames": [
                            "(string)"
                        ],
                        "pfxBlob": "(string)",
                        "siteName": "(string)",
                        "selfLink": "(string)",
                        "issuer": "(string)",
                        "issueDate": "(string)",
                        "expirationDate": "(string)",
                        "password": "(string)",
                        "thumbprint": "(string)",
                        "valid": "(boolean)",
                        "cerBlob": "(string)",
                        "publicKeyHash": "(string)",
                        "hostingEnvironment": "(string)"
                    },
                    "loadBalancerCredential": {
                        "userName": "(string)",
                        "password": "(string)"
                    },
                    "webWorkerCredential": {
                        "userName": "(string)",
                        "password": "(string)"
                    },
                    "publisherCredential": {
                        "userName": "(string)",
                        "password": "(string)"
                    },
                    "fileServerAdminCredential": {
                        "userName": "(string)",
                        "password": "(string)"
                    },
                    "managementServerAdminCredential": {
                        "userName": "(string)",
                        "password": "(string)"
                    },
                    "rejectPrivateAddresses": "(boolean)",
                    "privateAddressRange": [
                        "(string)"
                    ],
                    "privateAddressRangeV6": [
                        "(string)"
                    ],
                    "ipSslFrontEndVipAddressRange": [
                        "(string)"
                    ],
                    "ipSslFrontEndVipAddressRangeV6": [
                        "(string)"
                    ],
                    "winAuthAdminState": "(integer)",
                    "customAppPoolIdentityAdminState": "(boolean)"
                }
            }
        },
        "ResponseBodyDoc": {
            "id": "Resource Id. Typically id is populated only for responses to GET requests. Caller is responsible for passing in this\r\n            value for GET requests only.\r\n            For example: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupId}/providers/Microsoft.Web/sites/{sitename}",
            "name": "Name of resource",
            "type": "Type of resource e.g Microsoft.Web/sites",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "name": "Name for the web system",
                "username": "Administrator account",
                "password": "PAssword for the administrator account",
                "fileShare": "File share for content storage",
                "publishingDns": "Publishing DNS",
                "ftpDns": "Ftp DNS",
                "parkingPage": "Parking page name",
                "parkingPageContent": "Parking page content",
                "storageDomain": "Storage domain",
                "connectionStrings": [
                    {
                        "name": "Name for the database",
                        "value": "Connection string"
                    }
                ],
                "dnsSuffix": "Dns suffix",
                "controlPanelUrl": "Link to a page that displays the Control Panel for the Web System.",
                "location": "Location for the Web System, used for OnPrem CSM.",
                "webSystemSummary": {
                    "numberOfWebWorkers": "Number of web workers",
                    "numberOfPublishers": "Number of publishers",
                    "numberOfLoadBalancers": "Number of load balancers",
                    "numberOfControllers": "Number of controllers",
                    "numberOfActiveWebsites": "Number of active websites"
                },
                "configurationSettings": {
                    "publishingAuditLogEnabled": "Enables or disables Publishing Audit log",
                    "defaultWebSiteCertificate": {
                        "friendlyName": "Friendly name of the certificate",
                        "subjectName": "Subject name of the certificate",
                        "hostNames": [
                            null
                        ],
                        "pfxBlob": "Pfx blob",
                        "siteName": "App name",
                        "selfLink": "Self link",
                        "issuer": "Certificate issuer",
                        "issueDate": "Certificate issue Date",
                        "expirationDate": "Certificate expriration date",
                        "password": "Certificate password",
                        "thumbprint": "Certificate thumbprint",
                        "valid": "Is the certificate valid?",
                        "cerBlob": "Raw bytes of .cer file",
                        "publicKeyHash": "Public key hash",
                        "hostingEnvironment": "The hosting environment the certificate exists on"
                    },
                    "publisherCertificate": {
                        "friendlyName": "Friendly name of the certificate",
                        "subjectName": "Subject name of the certificate",
                        "hostNames": [
                            null
                        ],
                        "pfxBlob": "Pfx blob",
                        "siteName": "App name",
                        "selfLink": "Self link",
                        "issuer": "Certificate issuer",
                        "issueDate": "Certificate issue Date",
                        "expirationDate": "Certificate expriration date",
                        "password": "Certificate password",
                        "thumbprint": "Certificate thumbprint",
                        "valid": "Is the certificate valid?",
                        "cerBlob": "Raw bytes of .cer file",
                        "publicKeyHash": "Public key hash",
                        "hostingEnvironment": "The hosting environment the certificate exists on"
                    },
                    "loadBalancerCredential": {
                        "userName": "user name associated with the credentials.",
                        "password": "Password for the user name associated with the credentials."
                    },
                    "webWorkerCredential": {
                        "userName": "user name associated with the credentials.",
                        "password": "Password for the user name associated with the credentials."
                    },
                    "publisherCredential": {
                        "userName": "user name associated with the credentials.",
                        "password": "Password for the user name associated with the credentials."
                    },
                    "fileServerAdminCredential": {
                        "userName": "user name associated with the credentials.",
                        "password": "Password for the user name associated with the credentials."
                    },
                    "managementServerAdminCredential": {
                        "userName": "user name associated with the credentials.",
                        "password": "Password for the user name associated with the credentials."
                    },
                    "rejectPrivateAddresses": "Defines if website's outbound calls to private IP addresses should be rejected",
                    "privateAddressRange": [
                        null
                    ],
                    "privateAddressRangeV6": [
                        null
                    ],
                    "ipSslFrontEndVipAddressRange": [
                        null
                    ],
                    "ipSslFrontEndVipAddressRangeV6": [
                        null
                    ],
                    "winAuthAdminState": "Sets Windows Authentication globally for WebSystem. 0 - disallowed, 1 - allowed, 2 - required.",
                    "customAppPoolIdentityAdminState": "Enables or disables use of Custom credentials for website's application pool"
                }
            }
        },
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "name": "(string)",
                "username": "(string)",
                "password": "(string)",
                "fileShare": "(string)",
                "publishingDns": "(string)",
                "ftpDns": "(string)",
                "parkingPage": "(string)",
                "parkingPageContent": "(string)",
                "storageDomain": "(string)",
                "connectionStrings": [
                    {
                        "name": "(string)",
                        "value": "(string)"
                    }
                ],
                "dnsSuffix": "(string)",
                "controlPanelUrl": "(string)",
                "location": "(string)",
                "webSystemSummary": {
                    "numberOfWebWorkers": "(integer)",
                    "numberOfPublishers": "(integer)",
                    "numberOfLoadBalancers": "(integer)",
                    "numberOfControllers": "(integer)",
                    "numberOfActiveWebsites": "(integer)"
                },
                "configurationSettings": {
                    "publishingAuditLogEnabled": "(boolean)",
                    "defaultWebSiteCertificate": {
                        "friendlyName": "(string)",
                        "subjectName": "(string)",
                        "hostNames": [
                            "(string)"
                        ],
                        "pfxBlob": "(string)",
                        "siteName": "(string)",
                        "selfLink": "(string)",
                        "issuer": "(string)",
                        "issueDate": "(string)",
                        "expirationDate": "(string)",
                        "password": "(string)",
                        "thumbprint": "(string)",
                        "valid": "(boolean)",
                        "cerBlob": "(string)",
                        "publicKeyHash": "(string)",
                        "hostingEnvironment": "(string)"
                    },
                    "publisherCertificate": {
                        "friendlyName": "(string)",
                        "subjectName": "(string)",
                        "hostNames": [
                            "(string)"
                        ],
                        "pfxBlob": "(string)",
                        "siteName": "(string)",
                        "selfLink": "(string)",
                        "issuer": "(string)",
                        "issueDate": "(string)",
                        "expirationDate": "(string)",
                        "password": "(string)",
                        "thumbprint": "(string)",
                        "valid": "(boolean)",
                        "cerBlob": "(string)",
                        "publicKeyHash": "(string)",
                        "hostingEnvironment": "(string)"
                    },
                    "loadBalancerCredential": {
                        "userName": "(string)",
                        "password": "(string)"
                    },
                    "webWorkerCredential": {
                        "userName": "(string)",
                        "password": "(string)"
                    },
                    "publisherCredential": {
                        "userName": "(string)",
                        "password": "(string)"
                    },
                    "fileServerAdminCredential": {
                        "userName": "(string)",
                        "password": "(string)"
                    },
                    "managementServerAdminCredential": {
                        "userName": "(string)",
                        "password": "(string)"
                    },
                    "rejectPrivateAddresses": "(boolean)",
                    "privateAddressRange": [
                        "(string)"
                    ],
                    "privateAddressRangeV6": [
                        "(string)"
                    ],
                    "ipSslFrontEndVipAddressRange": [
                        "(string)"
                    ],
                    "ipSslFrontEndVipAddressRangeV6": [
                        "(string)"
                    ],
                    "winAuthAdminState": "(integer)",
                    "customAppPoolIdentityAdminState": "(boolean)"
                }
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "name": "Name for the web system",
                "username": "Administrator account",
                "password": "PAssword for the administrator account",
                "fileShare": "File share for content storage",
                "publishingDns": "Publishing DNS",
                "ftpDns": "Ftp DNS",
                "parkingPage": "Parking page name",
                "parkingPageContent": "Parking page content",
                "storageDomain": "Storage domain",
                "connectionStrings": [
                    {
                        "name": "Name for the database",
                        "value": "Connection string"
                    }
                ],
                "dnsSuffix": "Dns suffix",
                "controlPanelUrl": "Link to a page that displays the Control Panel for the Web System.",
                "location": "Location for the Web System, used for OnPrem CSM.",
                "webSystemSummary": {
                    "numberOfWebWorkers": "Number of web workers",
                    "numberOfPublishers": "Number of publishers",
                    "numberOfLoadBalancers": "Number of load balancers",
                    "numberOfControllers": "Number of controllers",
                    "numberOfActiveWebsites": "Number of active websites"
                },
                "configurationSettings": {
                    "publishingAuditLogEnabled": "Enables or disables Publishing Audit log",
                    "defaultWebSiteCertificate": {
                        "friendlyName": "Friendly name of the certificate",
                        "subjectName": "Subject name of the certificate",
                        "hostNames": [
                            null
                        ],
                        "pfxBlob": "Pfx blob",
                        "siteName": "App name",
                        "selfLink": "Self link",
                        "issuer": "Certificate issuer",
                        "issueDate": "Certificate issue Date",
                        "expirationDate": "Certificate expriration date",
                        "password": "Certificate password",
                        "thumbprint": "Certificate thumbprint",
                        "valid": "Is the certificate valid?",
                        "cerBlob": "Raw bytes of .cer file",
                        "publicKeyHash": "Public key hash",
                        "hostingEnvironment": "The hosting environment the certificate exists on"
                    },
                    "publisherCertificate": {
                        "friendlyName": "Friendly name of the certificate",
                        "subjectName": "Subject name of the certificate",
                        "hostNames": [
                            null
                        ],
                        "pfxBlob": "Pfx blob",
                        "siteName": "App name",
                        "selfLink": "Self link",
                        "issuer": "Certificate issuer",
                        "issueDate": "Certificate issue Date",
                        "expirationDate": "Certificate expriration date",
                        "password": "Certificate password",
                        "thumbprint": "Certificate thumbprint",
                        "valid": "Is the certificate valid?",
                        "cerBlob": "Raw bytes of .cer file",
                        "publicKeyHash": "Public key hash",
                        "hostingEnvironment": "The hosting environment the certificate exists on"
                    },
                    "loadBalancerCredential": {
                        "userName": "user name associated with the credentials.",
                        "password": "Password for the user name associated with the credentials."
                    },
                    "webWorkerCredential": {
                        "userName": "user name associated with the credentials.",
                        "password": "Password for the user name associated with the credentials."
                    },
                    "publisherCredential": {
                        "userName": "user name associated with the credentials.",
                        "password": "Password for the user name associated with the credentials."
                    },
                    "fileServerAdminCredential": {
                        "userName": "user name associated with the credentials.",
                        "password": "Password for the user name associated with the credentials."
                    },
                    "managementServerAdminCredential": {
                        "userName": "user name associated with the credentials.",
                        "password": "Password for the user name associated with the credentials."
                    },
                    "rejectPrivateAddresses": "Defines if website's outbound calls to private IP addresses should be rejected",
                    "privateAddressRange": [
                        null
                    ],
                    "privateAddressRangeV6": [
                        null
                    ],
                    "ipSslFrontEndVipAddressRange": [
                        null
                    ],
                    "ipSslFrontEndVipAddressRangeV6": [
                        null
                    ],
                    "winAuthAdminState": "Sets Windows Authentication globally for WebSystem. 0 - disallowed, 1 - allowed, 2 - required.",
                    "customAppPoolIdentityAdminState": "Enables or disables use of Custom credentials for website's application pool"
                }
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web.Admin/systems/{name}",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web.Admin/systems/{name}/config",
        "ResponseBody": {
            "id": "(string)",
            "name": "(string)",
            "type": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "publishingAuditLogEnabled": "(boolean)",
                "defaultWebSiteCertificate": {
                    "friendlyName": "(string)",
                    "subjectName": "(string)",
                    "hostNames": [
                        "(string)"
                    ],
                    "pfxBlob": "(string)",
                    "siteName": "(string)",
                    "selfLink": "(string)",
                    "issuer": "(string)",
                    "issueDate": "(string)",
                    "expirationDate": "(string)",
                    "password": "(string)",
                    "thumbprint": "(string)",
                    "valid": "(boolean)",
                    "cerBlob": "(string)",
                    "publicKeyHash": "(string)",
                    "hostingEnvironment": "(string)"
                },
                "publisherCertificate": {
                    "friendlyName": "(string)",
                    "subjectName": "(string)",
                    "hostNames": [
                        "(string)"
                    ],
                    "pfxBlob": "(string)",
                    "siteName": "(string)",
                    "selfLink": "(string)",
                    "issuer": "(string)",
                    "issueDate": "(string)",
                    "expirationDate": "(string)",
                    "password": "(string)",
                    "thumbprint": "(string)",
                    "valid": "(boolean)",
                    "cerBlob": "(string)",
                    "publicKeyHash": "(string)",
                    "hostingEnvironment": "(string)"
                },
                "loadBalancerCredential": {
                    "userName": "(string)",
                    "password": "(string)"
                },
                "webWorkerCredential": {
                    "userName": "(string)",
                    "password": "(string)"
                },
                "publisherCredential": {
                    "userName": "(string)",
                    "password": "(string)"
                },
                "fileServerAdminCredential": {
                    "userName": "(string)",
                    "password": "(string)"
                },
                "managementServerAdminCredential": {
                    "userName": "(string)",
                    "password": "(string)"
                },
                "rejectPrivateAddresses": "(boolean)",
                "privateAddressRange": [
                    "(string)"
                ],
                "privateAddressRangeV6": [
                    "(string)"
                ],
                "ipSslFrontEndVipAddressRange": [
                    "(string)"
                ],
                "ipSslFrontEndVipAddressRangeV6": [
                    "(string)"
                ],
                "winAuthAdminState": "(integer)",
                "customAppPoolIdentityAdminState": "(boolean)"
            }
        },
        "ResponseBodyDoc": {
            "id": "Resource Id. Typically id is populated only for responses to GET requests. Caller is responsible for passing in this\r\n            value for GET requests only.\r\n            For example: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupId}/providers/Microsoft.Web/sites/{sitename}",
            "name": "Name of resource",
            "type": "Type of resource e.g Microsoft.Web/sites",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "publishingAuditLogEnabled": "Enables or disables Publishing Audit log",
                "defaultWebSiteCertificate": {
                    "friendlyName": "Friendly name of the certificate",
                    "subjectName": "Subject name of the certificate",
                    "hostNames": [
                        null
                    ],
                    "pfxBlob": "Pfx blob",
                    "siteName": "App name",
                    "selfLink": "Self link",
                    "issuer": "Certificate issuer",
                    "issueDate": "Certificate issue Date",
                    "expirationDate": "Certificate expriration date",
                    "password": "Certificate password",
                    "thumbprint": "Certificate thumbprint",
                    "valid": "Is the certificate valid?",
                    "cerBlob": "Raw bytes of .cer file",
                    "publicKeyHash": "Public key hash",
                    "hostingEnvironment": "The hosting environment the certificate exists on"
                },
                "publisherCertificate": {
                    "friendlyName": "Friendly name of the certificate",
                    "subjectName": "Subject name of the certificate",
                    "hostNames": [
                        null
                    ],
                    "pfxBlob": "Pfx blob",
                    "siteName": "App name",
                    "selfLink": "Self link",
                    "issuer": "Certificate issuer",
                    "issueDate": "Certificate issue Date",
                    "expirationDate": "Certificate expriration date",
                    "password": "Certificate password",
                    "thumbprint": "Certificate thumbprint",
                    "valid": "Is the certificate valid?",
                    "cerBlob": "Raw bytes of .cer file",
                    "publicKeyHash": "Public key hash",
                    "hostingEnvironment": "The hosting environment the certificate exists on"
                },
                "loadBalancerCredential": {
                    "userName": "user name associated with the credentials.",
                    "password": "Password for the user name associated with the credentials."
                },
                "webWorkerCredential": {
                    "userName": "user name associated with the credentials.",
                    "password": "Password for the user name associated with the credentials."
                },
                "publisherCredential": {
                    "userName": "user name associated with the credentials.",
                    "password": "Password for the user name associated with the credentials."
                },
                "fileServerAdminCredential": {
                    "userName": "user name associated with the credentials.",
                    "password": "Password for the user name associated with the credentials."
                },
                "managementServerAdminCredential": {
                    "userName": "user name associated with the credentials.",
                    "password": "Password for the user name associated with the credentials."
                },
                "rejectPrivateAddresses": "Defines if website's outbound calls to private IP addresses should be rejected",
                "privateAddressRange": [
                    null
                ],
                "privateAddressRangeV6": [
                    null
                ],
                "ipSslFrontEndVipAddressRange": [
                    null
                ],
                "ipSslFrontEndVipAddressRangeV6": [
                    null
                ],
                "winAuthAdminState": "Sets Windows Authentication globally for WebSystem. 0 - disallowed, 1 - allowed, 2 - required.",
                "customAppPoolIdentityAdminState": "Enables or disables use of Custom credentials for website's application pool"
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web.Admin/systems/{name}/config",
        "RequestBody": {
            "publishingAuditLogEnabled": "(boolean)",
            "defaultWebSiteCertificate": {
                "friendlyName": "(string)",
                "subjectName": "(string)",
                "hostNames": [
                    "(string)"
                ],
                "pfxBlob": "(string)",
                "siteName": "(string)",
                "selfLink": "(string)",
                "issuer": "(string)",
                "issueDate": "(string)",
                "expirationDate": "(string)",
                "password": "(string)",
                "thumbprint": "(string)",
                "valid": "(boolean)",
                "cerBlob": "(string)",
                "publicKeyHash": "(string)",
                "hostingEnvironment": "(string)"
            },
            "publisherCertificate": {
                "friendlyName": "(string)",
                "subjectName": "(string)",
                "hostNames": [
                    "(string)"
                ],
                "pfxBlob": "(string)",
                "siteName": "(string)",
                "selfLink": "(string)",
                "issuer": "(string)",
                "issueDate": "(string)",
                "expirationDate": "(string)",
                "password": "(string)",
                "thumbprint": "(string)",
                "valid": "(boolean)",
                "cerBlob": "(string)",
                "publicKeyHash": "(string)",
                "hostingEnvironment": "(string)"
            },
            "loadBalancerCredential": {
                "userName": "(string)",
                "password": "(string)"
            },
            "webWorkerCredential": {
                "userName": "(string)",
                "password": "(string)"
            },
            "publisherCredential": {
                "userName": "(string)",
                "password": "(string)"
            },
            "fileServerAdminCredential": {
                "userName": "(string)",
                "password": "(string)"
            },
            "managementServerAdminCredential": {
                "userName": "(string)",
                "password": "(string)"
            },
            "rejectPrivateAddresses": "(boolean)",
            "privateAddressRange": [
                "(string)"
            ],
            "privateAddressRangeV6": [
                "(string)"
            ],
            "ipSslFrontEndVipAddressRange": [
                "(string)"
            ],
            "ipSslFrontEndVipAddressRangeV6": [
                "(string)"
            ],
            "winAuthAdminState": "(integer)",
            "customAppPoolIdentityAdminState": "(boolean)"
        },
        "RequestBodyDoc": {
            "publishingAuditLogEnabled": "Enables or disables Publishing Audit log",
            "defaultWebSiteCertificate": {
                "friendlyName": "Friendly name of the certificate",
                "subjectName": "Subject name of the certificate",
                "hostNames": [
                    null
                ],
                "pfxBlob": "Pfx blob",
                "siteName": "App name",
                "selfLink": "Self link",
                "issuer": "Certificate issuer",
                "issueDate": "Certificate issue Date",
                "expirationDate": "Certificate expriration date",
                "password": "Certificate password",
                "thumbprint": "Certificate thumbprint",
                "valid": "Is the certificate valid?",
                "cerBlob": "Raw bytes of .cer file",
                "publicKeyHash": "Public key hash",
                "hostingEnvironment": "The hosting environment the certificate exists on"
            },
            "publisherCertificate": {
                "friendlyName": "Friendly name of the certificate",
                "subjectName": "Subject name of the certificate",
                "hostNames": [
                    null
                ],
                "pfxBlob": "Pfx blob",
                "siteName": "App name",
                "selfLink": "Self link",
                "issuer": "Certificate issuer",
                "issueDate": "Certificate issue Date",
                "expirationDate": "Certificate expriration date",
                "password": "Certificate password",
                "thumbprint": "Certificate thumbprint",
                "valid": "Is the certificate valid?",
                "cerBlob": "Raw bytes of .cer file",
                "publicKeyHash": "Public key hash",
                "hostingEnvironment": "The hosting environment the certificate exists on"
            },
            "loadBalancerCredential": {
                "userName": "user name associated with the credentials.",
                "password": "Password for the user name associated with the credentials."
            },
            "webWorkerCredential": {
                "userName": "user name associated with the credentials.",
                "password": "Password for the user name associated with the credentials."
            },
            "publisherCredential": {
                "userName": "user name associated with the credentials.",
                "password": "Password for the user name associated with the credentials."
            },
            "fileServerAdminCredential": {
                "userName": "user name associated with the credentials.",
                "password": "Password for the user name associated with the credentials."
            },
            "managementServerAdminCredential": {
                "userName": "user name associated with the credentials.",
                "password": "Password for the user name associated with the credentials."
            },
            "rejectPrivateAddresses": "Defines if website's outbound calls to private IP addresses should be rejected",
            "privateAddressRange": [
                null
            ],
            "privateAddressRangeV6": [
                null
            ],
            "ipSslFrontEndVipAddressRange": [
                null
            ],
            "ipSslFrontEndVipAddressRangeV6": [
                null
            ],
            "winAuthAdminState": "Sets Windows Authentication globally for WebSystem. 0 - disallowed, 1 - allowed, 2 - required.",
            "customAppPoolIdentityAdminState": "Enables or disables use of Custom credentials for website's application pool"
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web.Admin/systems/{name}/auditlogs",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web.Admin/systems/{webSystemName}/credentials/{name}",
        "RequestBody": {
            "credentialName": "(string)",
            "userName": "(string)",
            "password": "(string)"
        },
        "RequestBodyDoc": {
            "credentialName": "Username",
            "userName": "Username",
            "password": "Password for the account"
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web.Admin/systems/{name}/log",
        "ResponseBody": {
            "id": "(string)",
            "name": "(string)",
            "type": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": [
                {
                    "message": "(string)",
                    "messageId": "(integer)",
                    "serverName": "(string)",
                    "timeStamp": "(string)",
                    "traceLevel": "(integer)"
                }
            ]
        },
        "ResponseBodyDoc": {
            "id": "Resource Id. Typically id is populated only for responses to GET requests. Caller is responsible for passing in this\r\n            value for GET requests only.\r\n            For example: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupId}/providers/Microsoft.Web/sites/{sitename}",
            "name": "Name of resource",
            "type": "Type of resource e.g Microsoft.Web/sites",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": [
                {}
            ]
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web.Admin/systems/{webSystemName}/servers/{name}/log",
        "ResponseBody": {
            "id": "(string)",
            "name": "(string)",
            "type": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": [
                {
                    "message": "(string)",
                    "messageId": "(integer)",
                    "serverName": "(string)",
                    "timeStamp": "(string)",
                    "traceLevel": "(integer)"
                }
            ]
        },
        "ResponseBodyDoc": {
            "id": "Resource Id. Typically id is populated only for responses to GET requests. Caller is responsible for passing in this\r\n            value for GET requests only.\r\n            For example: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupId}/providers/Microsoft.Web/sites/{sitename}",
            "name": "Name of resource",
            "type": "Type of resource e.g Microsoft.Web/sites",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": [
                {}
            ]
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web.Admin/systems/{webSystemName}/servers",
        "ResponseBody": [
            {
                "id": "(string)",
                "name": "(string)",
                "type": "(string)",
                "kind": "(string)",
                "location": "(string)",
                "tags": {},
                "plan": {
                    "name": "(string)",
                    "publisher": "(string)",
                    "product": "(string)",
                    "promotionCode": "(string)"
                },
                "properties": {
                    "name": "(string)",
                    "status": "(string)",
                    "statusMessage": "(string)",
                    "serverState": "(string)",
                    "cpuPercentage": "(integer)",
                    "memoryPercentage": "(integer)",
                    "runningSitesNumber": "(integer)",
                    "computeMode": "(string)",
                    "workerSize": "(string)",
                    "workerSizeId": "(integer)",
                    "workerSizeName": "(string)",
                    "isAllocatedDedicatedWorker": "(boolean)",
                    "role": "(string)",
                    "feedUrl": "(string)",
                    "customFeeds": [
                        "(string)"
                    ],
                    "platformVersion": "(string)",
                    "diskQueueLength": "(integer)",
                    "httpQueueLength": "(integer)",
                    "maximumSiteWeight": "(integer)",
                    "runningSitesNames": [
                        "(string)"
                    ],
                    "siteCount": "(integer)",
                    "virtualFarmName": "(string)",
                    "readyForLoadBalancing": "(boolean)",
                    "isStandbyServer": "(boolean)",
                    "isDraining": "(boolean)",
                    "lastError": "(string)",
                    "currentOperations": "(string)"
                }
            }
        ],
        "ResponseBodyDoc": [
            {
                "id": "Resource Id. Typically id is populated only for responses to GET requests. Caller is responsible for passing in this\r\n            value for GET requests only.\r\n            For example: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupId}/providers/Microsoft.Web/sites/{sitename}",
                "name": "Name of resource",
                "type": "Type of resource e.g Microsoft.Web/sites",
                "kind": "Kind of app e.g web app, api app, mobile app",
                "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
                "tags": {},
                "plan": {
                    "name": "The name",
                    "publisher": "The publisher",
                    "product": "The product",
                    "promotionCode": "The promotion code"
                },
                "properties": {
                    "name": "Name of the server",
                    "status": "Current status",
                    "statusMessage": "Last line of the log",
                    "serverState": "Server state",
                    "cpuPercentage": "Current CPU utilization",
                    "memoryPercentage": "Current memory utilization",
                    "runningSitesNumber": "Number of running sites",
                    "computeMode": "Compute mode",
                    "workerSize": "Old worker size\r\n            DEPRECATED",
                    "workerSizeId": "Dynamic Worker size ID, note: this replaces the older worker size",
                    "workerSizeName": "Dynamic Worker size name for display purposes",
                    "isAllocatedDedicatedWorker": "Flag, whether the worker belongs to dedicated ones and has been already allocated",
                    "role": "Role of the server",
                    "feedUrl": "URL of the main feed used to install products on server",
                    "customFeeds": [
                        null
                    ],
                    "platformVersion": "Indicates the version of currently executing bits",
                    "diskQueueLength": "Web Worker role disk queue length",
                    "httpQueueLength": "Web Worker role http queue length",
                    "maximumSiteWeight": "Maximum site weight",
                    "runningSitesNames": [
                        null
                    ],
                    "siteCount": "Site count on Web Worker",
                    "virtualFarmName": "Virtual Farm Web Worker belongs to",
                    "readyForLoadBalancing": "Is server ready for load balancing",
                    "isStandbyServer": "Is websites environment controller in Standby mode",
                    "isDraining": "Is server draining requests",
                    "lastError": "Last error on server",
                    "currentOperations": "Current operation being executed on server"
                }
            }
        ],
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web.Admin/systems/{webSystemName}/servers/{name}",
        "ResponseBody": {
            "id": "(string)",
            "name": "(string)",
            "type": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "name": "(string)",
                "status": "(string)",
                "statusMessage": "(string)",
                "serverState": "(string)",
                "cpuPercentage": "(integer)",
                "memoryPercentage": "(integer)",
                "runningSitesNumber": "(integer)",
                "computeMode": "(string)",
                "workerSize": "(string)",
                "workerSizeId": "(integer)",
                "workerSizeName": "(string)",
                "isAllocatedDedicatedWorker": "(boolean)",
                "role": "(string)",
                "feedUrl": "(string)",
                "customFeeds": [
                    "(string)"
                ],
                "platformVersion": "(string)",
                "diskQueueLength": "(integer)",
                "httpQueueLength": "(integer)",
                "maximumSiteWeight": "(integer)",
                "runningSitesNames": [
                    "(string)"
                ],
                "siteCount": "(integer)",
                "virtualFarmName": "(string)",
                "readyForLoadBalancing": "(boolean)",
                "isStandbyServer": "(boolean)",
                "isDraining": "(boolean)",
                "lastError": "(string)",
                "currentOperations": "(string)"
            }
        },
        "ResponseBodyDoc": {
            "id": "Resource Id. Typically id is populated only for responses to GET requests. Caller is responsible for passing in this\r\n            value for GET requests only.\r\n            For example: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupId}/providers/Microsoft.Web/sites/{sitename}",
            "name": "Name of resource",
            "type": "Type of resource e.g Microsoft.Web/sites",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "name": "Name of the server",
                "status": "Current status",
                "statusMessage": "Last line of the log",
                "serverState": "Server state",
                "cpuPercentage": "Current CPU utilization",
                "memoryPercentage": "Current memory utilization",
                "runningSitesNumber": "Number of running sites",
                "computeMode": "Compute mode",
                "workerSize": "Old worker size\r\n            DEPRECATED",
                "workerSizeId": "Dynamic Worker size ID, note: this replaces the older worker size",
                "workerSizeName": "Dynamic Worker size name for display purposes",
                "isAllocatedDedicatedWorker": "Flag, whether the worker belongs to dedicated ones and has been already allocated",
                "role": "Role of the server",
                "feedUrl": "URL of the main feed used to install products on server",
                "customFeeds": [
                    null
                ],
                "platformVersion": "Indicates the version of currently executing bits",
                "diskQueueLength": "Web Worker role disk queue length",
                "httpQueueLength": "Web Worker role http queue length",
                "maximumSiteWeight": "Maximum site weight",
                "runningSitesNames": [
                    null
                ],
                "siteCount": "Site count on Web Worker",
                "virtualFarmName": "Virtual Farm Web Worker belongs to",
                "readyForLoadBalancing": "Is server ready for load balancing",
                "isStandbyServer": "Is websites environment controller in Standby mode",
                "isDraining": "Is server draining requests",
                "lastError": "Last error on server",
                "currentOperations": "Current operation being executed on server"
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web.Admin/systems/{webSystemName}/servers/{name}",
        "ResponseBody": {
            "id": "(string)",
            "name": "(string)",
            "type": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "name": "(string)",
                "status": "(string)",
                "statusMessage": "(string)",
                "serverState": "(string)",
                "cpuPercentage": "(integer)",
                "memoryPercentage": "(integer)",
                "runningSitesNumber": "(integer)",
                "computeMode": "(string)",
                "workerSize": "(string)",
                "workerSizeId": "(integer)",
                "workerSizeName": "(string)",
                "isAllocatedDedicatedWorker": "(boolean)",
                "role": "(string)",
                "feedUrl": "(string)",
                "customFeeds": [
                    "(string)"
                ],
                "platformVersion": "(string)",
                "diskQueueLength": "(integer)",
                "httpQueueLength": "(integer)",
                "maximumSiteWeight": "(integer)",
                "runningSitesNames": [
                    "(string)"
                ],
                "siteCount": "(integer)",
                "virtualFarmName": "(string)",
                "readyForLoadBalancing": "(boolean)",
                "isStandbyServer": "(boolean)",
                "isDraining": "(boolean)",
                "lastError": "(string)",
                "currentOperations": "(string)"
            }
        },
        "ResponseBodyDoc": {
            "id": "Resource Id. Typically id is populated only for responses to GET requests. Caller is responsible for passing in this\r\n            value for GET requests only.\r\n            For example: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupId}/providers/Microsoft.Web/sites/{sitename}",
            "name": "Name of resource",
            "type": "Type of resource e.g Microsoft.Web/sites",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "name": "Name of the server",
                "status": "Current status",
                "statusMessage": "Last line of the log",
                "serverState": "Server state",
                "cpuPercentage": "Current CPU utilization",
                "memoryPercentage": "Current memory utilization",
                "runningSitesNumber": "Number of running sites",
                "computeMode": "Compute mode",
                "workerSize": "Old worker size\r\n            DEPRECATED",
                "workerSizeId": "Dynamic Worker size ID, note: this replaces the older worker size",
                "workerSizeName": "Dynamic Worker size name for display purposes",
                "isAllocatedDedicatedWorker": "Flag, whether the worker belongs to dedicated ones and has been already allocated",
                "role": "Role of the server",
                "feedUrl": "URL of the main feed used to install products on server",
                "customFeeds": [
                    null
                ],
                "platformVersion": "Indicates the version of currently executing bits",
                "diskQueueLength": "Web Worker role disk queue length",
                "httpQueueLength": "Web Worker role http queue length",
                "maximumSiteWeight": "Maximum site weight",
                "runningSitesNames": [
                    null
                ],
                "siteCount": "Site count on Web Worker",
                "virtualFarmName": "Virtual Farm Web Worker belongs to",
                "readyForLoadBalancing": "Is server ready for load balancing",
                "isStandbyServer": "Is websites environment controller in Standby mode",
                "isDraining": "Is server draining requests",
                "lastError": "Last error on server",
                "currentOperations": "Current operation being executed on server"
            }
        },
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "name": "(string)",
                "status": "(string)",
                "statusMessage": "(string)",
                "serverState": "(string)",
                "cpuPercentage": "(integer)",
                "memoryPercentage": "(integer)",
                "runningSitesNumber": "(integer)",
                "computeMode": "(string)",
                "workerSize": "(string)",
                "workerSizeId": "(integer)",
                "workerSizeName": "(string)",
                "isAllocatedDedicatedWorker": "(boolean)",
                "role": "(string)",
                "feedUrl": "(string)",
                "customFeeds": [
                    "(string)"
                ],
                "platformVersion": "(string)",
                "diskQueueLength": "(integer)",
                "httpQueueLength": "(integer)",
                "maximumSiteWeight": "(integer)",
                "runningSitesNames": [
                    "(string)"
                ],
                "siteCount": "(integer)",
                "virtualFarmName": "(string)",
                "readyForLoadBalancing": "(boolean)",
                "isStandbyServer": "(boolean)",
                "isDraining": "(boolean)",
                "lastError": "(string)",
                "currentOperations": "(string)"
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "name": "Name of the server",
                "status": "Current status",
                "statusMessage": "Last line of the log",
                "serverState": "Server state",
                "cpuPercentage": "Current CPU utilization",
                "memoryPercentage": "Current memory utilization",
                "runningSitesNumber": "Number of running sites",
                "computeMode": "Compute mode",
                "workerSize": "Old worker size\r\n            DEPRECATED",
                "workerSizeId": "Dynamic Worker size ID, note: this replaces the older worker size",
                "workerSizeName": "Dynamic Worker size name for display purposes",
                "isAllocatedDedicatedWorker": "Flag, whether the worker belongs to dedicated ones and has been already allocated",
                "role": "Role of the server",
                "feedUrl": "URL of the main feed used to install products on server",
                "customFeeds": [
                    null
                ],
                "platformVersion": "Indicates the version of currently executing bits",
                "diskQueueLength": "Web Worker role disk queue length",
                "httpQueueLength": "Web Worker role http queue length",
                "maximumSiteWeight": "Maximum site weight",
                "runningSitesNames": [
                    null
                ],
                "siteCount": "Site count on Web Worker",
                "virtualFarmName": "Virtual Farm Web Worker belongs to",
                "readyForLoadBalancing": "Is server ready for load balancing",
                "isStandbyServer": "Is websites environment controller in Standby mode",
                "isDraining": "Is server draining requests",
                "lastError": "Last error on server",
                "currentOperations": "Current operation being executed on server"
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web.Admin/systems/{webSystemName}/servers/{name}",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web.Admin/systems/{webSystemName}/servers/{name}/offline",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web.Admin/systems/{webSystemName}/servers/{name}/online",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web.Admin/systems/{webSystemName}/servers/{name}/reboot",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web.Admin/systems/{webSystemName}/servers/{name}/removeRunningSites",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web.Admin/systems/{webSystemName}/servers/{name}/repair",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web.Admin/systems/{webSystemName}/servers/{name}/sites",
        "ResponseBody": {
            "id": "(string)",
            "name": "(string)",
            "type": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "filter": "(string)",
                "pageNumber": "(integer)",
                "pageSize": "(integer)",
                "totalRecords": "(integer)",
                "totalFilteredRecords": "(integer)",
                "values": [
                    {
                        "uncPath": "(string)",
                        "numberOfWorkers": "(integer)",
                        "runningWorkers": [
                            {
                                "name": "(string)",
                                "status": "(string)",
                                "statusMessage": "(string)",
                                "serverState": "(string)",
                                "cpuPercentage": "(integer)",
                                "memoryPercentage": "(integer)",
                                "runningSitesNumber": "(integer)",
                                "computeMode": "(string)",
                                "workerSize": "(string)",
                                "workerSizeId": "(integer)",
                                "workerSizeName": "(string)",
                                "isAllocatedDedicatedWorker": "(boolean)",
                                "role": "(string)",
                                "feedUrl": "(string)",
                                "customFeeds": [
                                    "(string)"
                                ],
                                "platformVersion": "(string)",
                                "diskQueueLength": "(integer)",
                                "httpQueueLength": "(integer)",
                                "maximumSiteWeight": "(integer)",
                                "runningSitesNames": [
                                    "(string)"
                                ],
                                "siteCount": "(integer)",
                                "virtualFarmName": "(string)",
                                "readyForLoadBalancing": "(boolean)",
                                "isStandbyServer": "(boolean)",
                                "isDraining": "(boolean)",
                                "lastError": "(string)",
                                "currentOperations": "(string)"
                            }
                        ],
                        "subscription": "(string)",
                        "name": "(string)",
                        "state": "(string)",
                        "hostNames": [
                            "(string)"
                        ],
                        "repositorySiteName": "(string)",
                        "usageState": "(string)",
                        "enabled": "(boolean)",
                        "enabledHostNames": [
                            "(string)"
                        ],
                        "availabilityState": "(string)",
                        "hostNameSslStates": [
                            {
                                "name": "(string)",
                                "sslState": "(string)",
                                "virtualIP": "(string)",
                                "thumbprint": "(string)",
                                "toUpdate": "(boolean)",
                                "toUpdateIpBasedSsl": "(boolean)"
                            }
                        ],
                        "serverFarm": "(string)",
                        "serverFarmId": "(string)",
                        "lastModifiedTimeUtc": "(string)",
                        "siteConfig": {
                            "numberOfWorkers": "(integer)",
                            "defaultDocuments": [
                                "(string)"
                            ],
                            "netFrameworkVersion": "(string)",
                            "phpVersion": "(string)",
                            "pythonVersion": "(string)",
                            "requestTracingEnabled": "(boolean)",
                            "requestTracingExpirationTime": "(string)",
                            "remoteDebuggingEnabled": "(boolean)",
                            "remoteDebuggingVersion": "(string)",
                            "httpLoggingEnabled": "(boolean)",
                            "logsDirectorySizeLimit": "(integer)",
                            "detailedErrorLoggingEnabled": "(boolean)",
                            "publishingUsername": "(string)",
                            "publishingPassword": "(string)",
                            "appSettings": [
                                {
                                    "name": "(string)",
                                    "value": "(string)"
                                }
                            ],
                            "metadata": [
                                {
                                    "name": "(string)",
                                    "value": "(string)"
                                }
                            ],
                            "connectionStrings": [
                                {
                                    "name": "(string)",
                                    "connectionString": "(string)",
                                    "type": "(string)"
                                }
                            ],
                            "handlerMappings": [
                                {
                                    "extension": "(string)",
                                    "scriptProcessor": "(string)",
                                    "arguments": "(string)"
                                }
                            ],
                            "documentRoot": "(string)",
                            "scmType": "(string)",
                            "use32BitWorkerProcess": "(boolean)",
                            "webSocketsEnabled": "(boolean)",
                            "alwaysOn": "(boolean)",
                            "javaVersion": "(string)",
                            "javaContainer": "(string)",
                            "javaContainerVersion": "(string)",
                            "managedPipelineMode": "(string)",
                            "virtualApplications": [
                                {
                                    "virtualPath": "(string)",
                                    "physicalPath": "(string)",
                                    "preloadEnabled": "(boolean)",
                                    "virtualDirectories": [
                                        {
                                            "virtualPath": "(string)",
                                            "physicalPath": "(string)"
                                        }
                                    ]
                                }
                            ],
                            "loadBalancing": "(string)",
                            "experiments": {
                                "rampUpRules": [
                                    {
                                        "actionHostName": "(string)",
                                        "reroutePercentage": "(number)",
                                        "changeStep": "(number)",
                                        "changeIntervalInMinutes": "(integer)",
                                        "minReroutePercentage": "(number)",
                                        "maxReroutePercentage": "(number)",
                                        "changeDecisionCallbackUrl": "(string)",
                                        "name": "(string)"
                                    }
                                ]
                            },
                            "limits": {
                                "maxPercentageCpu": "(number)",
                                "maxMemoryInMb": "(integer)",
                                "maxDiskSizeInMb": "(integer)"
                            },
                            "autoHealEnabled": "(boolean)",
                            "autoHealRules": {
                                "triggers": {
                                    "requests": {
                                        "count": "(integer)",
                                        "timeInterval": "(string)"
                                    },
                                    "privateBytesInKB": "(integer)",
                                    "statusCodes": [
                                        {
                                            "status": "(integer)",
                                            "subStatus": "(integer)",
                                            "win32Status": "(integer)",
                                            "count": "(integer)",
                                            "timeInterval": "(string)"
                                        }
                                    ],
                                    "slowRequests": {
                                        "timeTaken": "(string)",
                                        "count": "(integer)",
                                        "timeInterval": "(string)"
                                    }
                                },
                                "actions": {
                                    "actionType": "(string)",
                                    "customAction": {
                                        "exe": "(string)",
                                        "parameters": "(string)"
                                    }
                                }
                            },
                            "tracingOptions": "(string)",
                            "vnetName": "(string)",
                            "siteAuthEnabled": "(boolean)",
                            "siteAuthSettings": {
                                "clientId": "(string)",
                                "issuer": "(string)",
                                "aadClientId": "(string)",
                                "openIdIssuer": "(string)"
                            },
                            "autoSwapSlotName": "(string)"
                        },
                        "trafficManagerHostNames": [
                            "(string)"
                        ],
                        "sku": "(string)",
                        "premiumAppDeployed": "(boolean)",
                        "scmSiteAlsoStopped": "(boolean)",
                        "targetSwapSlot": "(string)",
                        "hostingEnvironment": "(string)",
                        "microService": "(string)",
                        "gatewaySiteName": "(string)",
                        "clientAffinityEnabled": "(boolean)",
                        "clientCertEnabled": "(boolean)",
                        "kind": "(string)",
                        "outboundIpAddresses": "(string)",
                        "cloningInfo": {
                            "correlationId": "(string)",
                            "overwrite": "(boolean)",
                            "cloneCustomHostNames": "(boolean)",
                            "source": {
                                "name": "(string)",
                                "location": "(string)",
                                "resourceGroupName": "(string)",
                                "subscriptionId": "(string)",
                                "slot": "(string)"
                            },
                            "hostingEnvironment": "(string)"
                        }
                    }
                ]
            }
        },
        "ResponseBodyDoc": {
            "id": "Resource Id. Typically id is populated only for responses to GET requests. Caller is responsible for passing in this\r\n            value for GET requests only.\r\n            For example: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupId}/providers/Microsoft.Web/sites/{sitename}",
            "name": "Name of resource",
            "type": "Type of resource e.g Microsoft.Web/sites",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "values": [
                    {
                        "runningWorkers": [
                            {
                                "name": "Name of the server",
                                "status": "Current status",
                                "statusMessage": "Last line of the log",
                                "serverState": "Server state",
                                "cpuPercentage": "Current CPU utilization",
                                "memoryPercentage": "Current memory utilization",
                                "runningSitesNumber": "Number of running sites",
                                "computeMode": "Compute mode",
                                "workerSize": "Old worker size\r\n            DEPRECATED",
                                "workerSizeId": "Dynamic Worker size ID, note: this replaces the older worker size",
                                "workerSizeName": "Dynamic Worker size name for display purposes",
                                "isAllocatedDedicatedWorker": "Flag, whether the worker belongs to dedicated ones and has been already allocated",
                                "role": "Role of the server",
                                "feedUrl": "URL of the main feed used to install products on server",
                                "customFeeds": [
                                    null
                                ],
                                "platformVersion": "Indicates the version of currently executing bits",
                                "diskQueueLength": "Web Worker role disk queue length",
                                "httpQueueLength": "Web Worker role http queue length",
                                "maximumSiteWeight": "Maximum site weight",
                                "runningSitesNames": [
                                    null
                                ],
                                "siteCount": "Site count on Web Worker",
                                "virtualFarmName": "Virtual Farm Web Worker belongs to",
                                "readyForLoadBalancing": "Is server ready for load balancing",
                                "isStandbyServer": "Is websites environment controller in Standby mode",
                                "isDraining": "Is server draining requests",
                                "lastError": "Last error on server",
                                "currentOperations": "Current operation being executed on server"
                            }
                        ],
                        "name": "Name of web app",
                        "state": "State of the web app",
                        "hostNames": [
                            null
                        ],
                        "repositorySiteName": "Name of repository site",
                        "usageState": "State indicating whether web app has exceeded its quota usage",
                        "enabled": "True if the site is enabled; otherwise, false. Setting this  value to false disables the site (takes the site off line).",
                        "enabledHostNames": [
                            null
                        ],
                        "availabilityState": "Management information availability state for the web app. Possible values are Normal or Limited. \r\n            Normal means that the site is running correctly and that management information for the site is available. \r\n            Limited means that only partial management information for the site is available and that detailed site information is unavailable.",
                        "hostNameSslStates": [
                            {
                                "name": "Host name",
                                "sslState": "SSL type",
                                "virtualIP": "Virtual IP address assigned to the host name if IP based SSL is enabled",
                                "thumbprint": "SSL cert thumbprint",
                                "toUpdate": "Set this flag to update existing host name",
                                "toUpdateIpBasedSsl": "Set this flag to update existing host name"
                            }
                        ],
                        "serverFarm": "App service plan web app is assoicated with",
                        "lastModifiedTimeUtc": "Last time web app was modified in UTC",
                        "siteConfig": {
                            "numberOfWorkers": "Number of workers",
                            "defaultDocuments": [
                                null
                            ],
                            "netFrameworkVersion": "Net Framework Version",
                            "phpVersion": "Version of PHP",
                            "pythonVersion": "Version of Python",
                            "requestTracingEnabled": "Enable request tracing",
                            "requestTracingExpirationTime": "Request tracing expiration time",
                            "remoteDebuggingEnabled": "Remote Debugging Enabled",
                            "remoteDebuggingVersion": "Remote Debugging Version",
                            "httpLoggingEnabled": "HTTP logging Enabled",
                            "logsDirectorySizeLimit": "HTTP Logs Directory size limit",
                            "detailedErrorLoggingEnabled": "Detailed error logging enabled",
                            "publishingUsername": "Publishing user name",
                            "publishingPassword": "Publishing password",
                            "appSettings": [
                                {
                                    "name": "Pair name",
                                    "value": "Pair value"
                                }
                            ],
                            "metadata": [
                                {
                                    "name": "Pair name",
                                    "value": "Pair value"
                                }
                            ],
                            "connectionStrings": [
                                {
                                    "name": "Name of connection string",
                                    "connectionString": "Connection string value",
                                    "type": "Type of database"
                                }
                            ],
                            "handlerMappings": [
                                {
                                    "extension": "Requests with this extension will be handled using the specified FastCGI application.",
                                    "scriptProcessor": "The absolute path to the FastCGI application.",
                                    "arguments": "Command-line arguments to be passed to the script processor."
                                }
                            ],
                            "documentRoot": "Document root",
                            "scmType": "SCM type",
                            "use32BitWorkerProcess": "Use 32 bit worker process",
                            "webSocketsEnabled": "Web socket enabled.",
                            "alwaysOn": "Always On",
                            "javaVersion": "Java version",
                            "javaContainer": "Java container",
                            "javaContainerVersion": "Java container version",
                            "managedPipelineMode": "Managed pipeline mode",
                            "virtualApplications": [
                                {
                                    "virtualDirectories": [
                                        {}
                                    ]
                                }
                            ],
                            "loadBalancing": "Site load balancing",
                            "experiments": {
                                "rampUpRules": [
                                    {
                                        "actionHostName": "Hostname of a slot to which the traffic will be redirected if decided to. E.g. mysite-stage.azurewebsites.net",
                                        "reroutePercentage": "Percentage of the traffic which will be redirected to {Microsoft.Web.Hosting.Administration.RampUpRule.ActionHostName}",
                                        "changeStep": "[Optional] In auto ramp up scenario this is the step to to add/remove from {Microsoft.Web.Hosting.Administration.RampUpRule.ReroutePercentage} until it reaches \r\n            {Microsoft.Web.Hosting.Administration.RampUpRule.MinReroutePercentage} or {Microsoft.Web.Hosting.Administration.RampUpRule.MaxReroutePercentage}. Site metrics are checked every N minutes specificed in {Microsoft.Web.Hosting.Administration.RampUpRule.ChangeIntervalInMinutes}.\r\n            Custom decision algorithm can be provided in TiPCallback site extension which Url can be specified in {Microsoft.Web.Hosting.Administration.RampUpRule.ChangeDecisionCallbackUrl}",
                                        "changeIntervalInMinutes": "[Optional] Specifies interval in mimuntes to reevaluate ReroutePercentage",
                                        "minReroutePercentage": "[Optional] Specifies lower boundary above which ReroutePercentage will stay.",
                                        "maxReroutePercentage": "[Optional] Specifies upper boundary below which ReroutePercentage will stay.",
                                        "changeDecisionCallbackUrl": "Custom decision algorithm can be provided in TiPCallback site extension which Url can be specified. See TiPCallback site extension for the scaffold and contracts.\r\n            https://www.siteextensions.net/packages/TiPCallback/",
                                        "name": "Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment."
                                    }
                                ]
                            },
                            "limits": {
                                "maxPercentageCpu": "Maximum allowed CPU usage percentage",
                                "maxMemoryInMb": "Maximum allowed memory usage in MB",
                                "maxDiskSizeInMb": "Maximum allowed disk size usage in MB"
                            },
                            "autoHealEnabled": "Auto heal enabled",
                            "autoHealRules": {
                                "triggers": {
                                    "requests": {
                                        "count": "Count",
                                        "timeInterval": "TimeInterval"
                                    },
                                    "privateBytesInKB": "PrivateBytesInKB - Defines a rule based on private bytes",
                                    "statusCodes": [
                                        {
                                            "status": "HTTP status code",
                                            "subStatus": "SubStatus",
                                            "win32Status": "Win32 error code",
                                            "count": "Count",
                                            "timeInterval": "TimeInterval"
                                        }
                                    ],
                                    "slowRequests": {
                                        "timeTaken": "TimeTaken",
                                        "count": "Count",
                                        "timeInterval": "TimeInterval"
                                    }
                                },
                                "actions": {
                                    "actionType": "ActionType - predefined action to be taken",
                                    "customAction": {
                                        "exe": "Executable to be run",
                                        "parameters": "Parameters for the executable"
                                    }
                                }
                            },
                            "tracingOptions": "Tracing options",
                            "vnetName": "Vnet name",
                            "siteAuthEnabled": "App Service Authentication / Authorization enabled",
                            "siteAuthSettings": {
                                "clientId": "Gets or sets the unique ID of this relying party application, known as the client_id.",
                                "issuer": "Gets or sets the OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.\r\n            When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://sts.windows.net/{tenant-guid}/.\r\n            This URI is a case-sensitive identifier for the token issuer."
                            },
                            "autoSwapSlotName": "Auto swap slot name"
                        },
                        "trafficManagerHostNames": [
                            null
                        ],
                        "sku": "A pricing plan (SKU) of the server farm (App Service plan) that this web app belongs to.",
                        "premiumAppDeployed": "If set indicates whether web app is deployed as a premium app",
                        "scmSiteAlsoStopped": "If set indicates whether to stop SCM (KUDU) site when the web app is stopped. Default is false.",
                        "targetSwapSlot": "Read-only property that specifies which slot this app will swap into",
                        "hostingEnvironment": "Name of hosting environment web app belongs to",
                        "microService": "",
                        "gatewaySiteName": "Name of gateway app associated with web app",
                        "clientAffinityEnabled": "Specifies if the client affinity is enabled when load balancing http request for multiple instances of the web app",
                        "clientCertEnabled": "Specifies if the client certificate is enabled for the web app",
                        "kind": "Kind of resource",
                        "outboundIpAddresses": "List of comma separated IP addresses that this web app uses for outbound connections. Those can be used when configuring firewall rules for databases accessed by this web app.",
                        "cloningInfo": {
                            "correlationId": "Correlation Id of cloning operation. This id ties multiple cloning operations\r\n            together to use the same snapshot",
                            "overwrite": "Overwrite destination web app",
                            "cloneCustomHostNames": "If true, clone custom hostnames from source web app",
                            "source": {
                                "name": "Name of source web app",
                                "location": "Location of web app",
                                "resourceGroupName": "Resource group of web app",
                                "subscriptionId": "Azure subscription of web app",
                                "slot": "Name of web app slot"
                            },
                            "hostingEnvironment": "Hosting environment"
                        }
                    }
                ]
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web.Admin/systems/{webSystemName}/servers/{name}/valid",
        "ResponseBody": {
            "id": "(string)",
            "name": "(string)",
            "type": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "isValid": "(boolean)",
                "detail": {
                    "code": "(string)",
                    "message": "(string)",
                    "extendedCode": "(string)",
                    "messageTemplate": "(string)",
                    "parameters": [
                        "(string)"
                    ],
                    "innerErrors": [
                        "(undefined)"
                    ]
                }
            }
        },
        "ResponseBodyDoc": {
            "id": "Resource Id. Typically id is populated only for responses to GET requests. Caller is responsible for passing in this\r\n            value for GET requests only.\r\n            For example: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupId}/providers/Microsoft.Web/sites/{sitename}",
            "name": "Name of resource",
            "type": "Type of resource e.g Microsoft.Web/sites",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "isValid": "Is valid",
                "detail": {
                    "code": "Basic error code",
                    "message": "Any details of the error",
                    "extendedCode": "Type of error",
                    "messageTemplate": "Message template",
                    "parameters": [
                        null
                    ],
                    "innerErrors": [
                        null
                    ]
                }
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web.Admin/systems/{webSystemName}/validateRoleServer",
        "ResponseBody": {
            "id": "(string)",
            "name": "(string)",
            "type": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "isValid": "(boolean)",
                "detail": {
                    "code": "(string)",
                    "message": "(string)",
                    "extendedCode": "(string)",
                    "messageTemplate": "(string)",
                    "parameters": [
                        "(string)"
                    ],
                    "innerErrors": [
                        "(undefined)"
                    ]
                }
            }
        },
        "ResponseBodyDoc": {
            "id": "Resource Id. Typically id is populated only for responses to GET requests. Caller is responsible for passing in this\r\n            value for GET requests only.\r\n            For example: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupId}/providers/Microsoft.Web/sites/{sitename}",
            "name": "Name of resource",
            "type": "Type of resource e.g Microsoft.Web/sites",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "isValid": "Is valid",
                "detail": {
                    "code": "Basic error code",
                    "message": "Any details of the error",
                    "extendedCode": "Type of error",
                    "messageTemplate": "Message template",
                    "parameters": [
                        null
                    ],
                    "innerErrors": [
                        null
                    ]
                }
            }
        },
        "RequestBody": {
            "location": "(string)",
            "kind": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": {
                "name": "(string)",
                "status": "(string)",
                "statusMessage": "(string)",
                "serverState": "(string)",
                "cpuPercentage": "(integer)",
                "memoryPercentage": "(integer)",
                "runningSitesNumber": "(integer)",
                "computeMode": "(string)",
                "workerSize": "(string)",
                "workerSizeId": "(integer)",
                "workerSizeName": "(string)",
                "isAllocatedDedicatedWorker": "(boolean)",
                "role": "(string)",
                "feedUrl": "(string)",
                "customFeeds": [
                    "(string)"
                ],
                "platformVersion": "(string)",
                "diskQueueLength": "(integer)",
                "httpQueueLength": "(integer)",
                "maximumSiteWeight": "(integer)",
                "runningSitesNames": [
                    "(string)"
                ],
                "siteCount": "(integer)",
                "virtualFarmName": "(string)",
                "readyForLoadBalancing": "(boolean)",
                "isStandbyServer": "(boolean)",
                "isDraining": "(boolean)",
                "lastError": "(string)",
                "currentOperations": "(string)"
            }
        },
        "RequestBodyDoc": {
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": {
                "name": "Name of the server",
                "status": "Current status",
                "statusMessage": "Last line of the log",
                "serverState": "Server state",
                "cpuPercentage": "Current CPU utilization",
                "memoryPercentage": "Current memory utilization",
                "runningSitesNumber": "Number of running sites",
                "computeMode": "Compute mode",
                "workerSize": "Old worker size\r\n            DEPRECATED",
                "workerSizeId": "Dynamic Worker size ID, note: this replaces the older worker size",
                "workerSizeName": "Dynamic Worker size name for display purposes",
                "isAllocatedDedicatedWorker": "Flag, whether the worker belongs to dedicated ones and has been already allocated",
                "role": "Role of the server",
                "feedUrl": "URL of the main feed used to install products on server",
                "customFeeds": [
                    null
                ],
                "platformVersion": "Indicates the version of currently executing bits",
                "diskQueueLength": "Web Worker role disk queue length",
                "httpQueueLength": "Web Worker role http queue length",
                "maximumSiteWeight": "Maximum site weight",
                "runningSitesNames": [
                    null
                ],
                "siteCount": "Site count on Web Worker",
                "virtualFarmName": "Virtual Farm Web Worker belongs to",
                "readyForLoadBalancing": "Is server ready for load balancing",
                "isStandbyServer": "Is websites environment controller in Standby mode",
                "isDraining": "Is server draining requests",
                "lastError": "Last error on server",
                "currentOperations": "Current operation being executed on server"
            }
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web.Admin/systems/{webSystemName}/servers/{name}/workerSanitizingAllDrives",
        "ResponseBody": {
            "id": "(string)",
            "name": "(string)",
            "type": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": "(boolean)"
        },
        "ResponseBodyDoc": {
            "id": "Resource Id. Typically id is populated only for responses to GET requests. Caller is responsible for passing in this\r\n            value for GET requests only.\r\n            For example: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupId}/providers/Microsoft.Web/sites/{sitename}",
            "name": "Name of resource",
            "type": "Type of resource e.g Microsoft.Web/sites",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": "Resource specific properties"
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web.Admin/systems/{webSystemName}/servers/{name}/workerSanitizingAllDrives",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web.Admin/systems/{webSystemName}/servers/{name}/workerSanitizingSuspended",
        "ResponseBody": {
            "id": "(string)",
            "name": "(string)",
            "type": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": "(boolean)"
        },
        "ResponseBodyDoc": {
            "id": "Resource Id. Typically id is populated only for responses to GET requests. Caller is responsible for passing in this\r\n            value for GET requests only.\r\n            For example: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupId}/providers/Microsoft.Web/sites/{sitename}",
            "name": "Name of resource",
            "type": "Type of resource e.g Microsoft.Web/sites",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": "Resource specific properties"
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web.Admin/environment/features",
        "ResponseBody": {
            "id": "(string)",
            "name": "(string)",
            "type": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "tags": {},
            "plan": {
                "name": "(string)",
                "publisher": "(string)",
                "product": "(string)",
                "promotionCode": "(string)"
            },
            "properties": [
                {
                    "name": "(string)",
                    "value": "(boolean)",
                    "overridable": "(boolean)"
                }
            ]
        },
        "ResponseBodyDoc": {
            "id": "Resource Id. Typically id is populated only for responses to GET requests. Caller is responsible for passing in this\r\n            value for GET requests only.\r\n            For example: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupId}/providers/Microsoft.Web/sites/{sitename}",
            "name": "Name of resource",
            "type": "Type of resource e.g Microsoft.Web/sites",
            "kind": "Kind of app e.g web app, api app, mobile app",
            "location": "Geo region resource belongs to e.g. SouthCentralUS, SouthEastAsia",
            "tags": {},
            "plan": {
                "name": "The name",
                "publisher": "The publisher",
                "product": "The product",
                "promotionCode": "The promotion code"
            },
            "properties": [
                {}
            ]
        },
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web.Admin/environment/features/{name}/off",
        "ApiVersion": "2015-02-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web.Admin/environment/features/{name}/on",
        "ApiVersion": "2015-02-01"
    }
]
